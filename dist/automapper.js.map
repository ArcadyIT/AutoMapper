{"version":3,"sources":["AutoMapperHelper.js","AutoMapperValidator.js","AutoMapperEnumerations.js","AutoMapperBase.js","AsyncAutoMapper.js","AutoMapper.js","Profile.js","TypeConverter.js","naming-conventions/CamelCaseNamingConvention.js","naming-conventions/PascalCaseNamingConvention.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdzwfile":"automapper.js","sourcesContent":["/// <reference path=\"AutoMapperEnumerations.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AutoMapper helper functions\n     */\n    var AutoMapperHelper = (function () {\n        function AutoMapperHelper() {\n        }\n        AutoMapperHelper.getClassName = function (classType) {\n            if (classType && classType.name) {\n                return classType.name;\n            }\n            // source: http://stackoverflow.com/a/13914278/702357\n            if (classType && classType.constructor) {\n                var className = classType.toString();\n                if (className) {\n                    // classType.toString() is \"function classType (...) { ... }\"\n                    var matchParts = className.match(/function\\s*(\\w+)/);\n                    if (matchParts && matchParts.length === 2) {\n                        return matchParts[1];\n                    }\n                }\n                // for browsers which have name property in the constructor\n                // of the object, such as chrome\n                if (classType.constructor.name) {\n                    return classType.constructor.name;\n                }\n                if (classType.constructor.toString()) {\n                    var str = classType.constructor.toString();\n                    if (str.charAt(0) === '[') {\n                        // executed if the return of object.constructor.toString() is \"[object objectClass]\"\n                        var arr = str.match(/\\[\\w+\\s*(\\w+)\\]/);\n                    }\n                    else {\n                        // executed if the return of object.constructor.toString() is \"function objectClass () {}\"\n                        // (IE and Firefox)\n                        var arr = str.match(/function\\s*(\\w+)/);\n                    }\n                    if (arr && arr.length === 2) {\n                        return arr[1];\n                    }\n                }\n            }\n            throw new Error(\"Unable to extract class name from type '\" + classType + \"'\");\n        };\n        AutoMapperHelper.getFunctionParameters = function (functionStr) {\n            var stripComments = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n            var argumentNames = /([^\\s,]+)/g;\n            var functionString = functionStr.replace(stripComments, '');\n            var functionParameterNames = functionString.slice(functionString.indexOf('(') + 1, functionString.indexOf(')')).match(argumentNames);\n            if (functionParameterNames === null) {\n                functionParameterNames = new Array();\n            }\n            return functionParameterNames;\n        };\n        AutoMapperHelper.handleCurrying = function (func, args, closure) {\n            var argumentsStillToCome = func.length - args.length;\n            // saved accumulator array\n            // NOTE BL this does not deep copy array objects, only the array itself; should side effects occur, please report (or refactor).\n            var argumentsCopy = Array.prototype.slice.apply(args);\n            function accumulator(moreArgs, alreadyProvidedArgs, stillToCome) {\n                var previousAlreadyProvidedArgs = alreadyProvidedArgs.slice(0); // to reset\n                var previousStillToCome = stillToCome; // to reset\n                for (var i = 0; i < moreArgs.length; i++, stillToCome--) {\n                    alreadyProvidedArgs[alreadyProvidedArgs.length] = moreArgs[i];\n                }\n                if (stillToCome - moreArgs.length <= 0) {\n                    var functionCallResult = func.apply(closure, alreadyProvidedArgs);\n                    // reset vars, so curried function can be applied to new params.\n                    alreadyProvidedArgs = previousAlreadyProvidedArgs;\n                    stillToCome = previousStillToCome;\n                    return functionCallResult;\n                }\n                else {\n                    return function () {\n                        // arguments are params, so closure bussiness is avoided.\n                        return accumulator(arguments, alreadyProvidedArgs.slice(0), stillToCome);\n                    };\n                }\n            }\n            return accumulator([], argumentsCopy, argumentsStillToCome);\n        };\n        AutoMapperHelper.getMappingMetadataFromTransformationFunction = function (destination, func, sourceMapping) {\n            if (typeof func !== 'function') {\n                return {\n                    destination: destination,\n                    source: destination,\n                    transformation: AutoMapperHelper.getDestinationTransformation(func, false, sourceMapping, false),\n                    sourceMapping: sourceMapping,\n                    condition: null,\n                    ignore: false,\n                    async: false\n                };\n            }\n            var functionStr = func.toString();\n            var parameterNames = AutoMapperHelper.getFunctionParameters(functionStr);\n            var optsParamName = parameterNames.length >= 1 ? parameterNames[0] : '';\n            var source = sourceMapping\n                ? destination\n                : AutoMapperHelper.getMapFromString(functionStr, destination, optsParamName);\n            var metadata = {\n                destination: destination,\n                source: source,\n                transformation: AutoMapperHelper.getDestinationTransformation(func, true, sourceMapping, parameterNames.length === 2),\n                sourceMapping: sourceMapping,\n                condition: null,\n                ignore: AutoMapperHelper.getIgnoreFromString(functionStr, destination),\n                async: parameterNames.length === 2\n            };\n            // calling the member options function when used asynchronous would be too 'dangerous'.\n            if (!metadata.async && AutoMapperHelper.getFunctionCallIndex(functionStr, 'condition', optsParamName) >= 0) {\n                metadata.condition = AutoMapperHelper.getConditionFromFunction(func, source);\n            }\n            return metadata;\n        };\n        AutoMapperHelper.getDestinationTransformation = function (func, isFunction, sourceMapping, async) {\n            if (!isFunction) {\n                return {\n                    transformationType: AutoMapperJs.DestinationTransformationType.Constant,\n                    constant: func\n                };\n            }\n            var transformation;\n            if (sourceMapping) {\n                if (async) {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.AsyncSourceMemberOptions,\n                        asyncSourceMemberConfigurationOptionsFunc: func\n                    };\n                }\n                else {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.SourceMemberOptions,\n                        sourceMemberConfigurationOptionsFunc: func\n                    };\n                }\n            }\n            else {\n                if (async) {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.AsyncMemberOptions,\n                        asyncMemberConfigurationOptionsFunc: func\n                    };\n                }\n                else {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.MemberOptions,\n                        memberConfigurationOptionsFunc: func\n                    };\n                }\n            }\n            return transformation;\n        };\n        AutoMapperHelper.getIgnoreFromString = function (functionString, optionsParameterName) {\n            var indexOfIgnore = AutoMapperHelper.getFunctionCallIndex(functionString, 'ignore', optionsParameterName);\n            if (indexOfIgnore < 0) {\n                return false;\n            }\n            var indexOfMapFromStart = functionString.indexOf('(', indexOfIgnore) + 1;\n            var indexOfMapFromEnd = functionString.indexOf(')', indexOfMapFromStart);\n            if (indexOfMapFromStart < 0 || indexOfMapFromEnd < 0) {\n                return false;\n            }\n            var ignoreString = functionString.substring(indexOfMapFromStart, indexOfMapFromEnd).replace(/\\r/g, '').replace(/\\n/g, '').trim();\n            return ignoreString === null || ignoreString === ''\n                ? true // <optionsParameterName>.ignore()\n                : false; // <optionsParameterName>.ignore(<ignoreString> -> unexpected content)\n        };\n        AutoMapperHelper.getMapFromString = function (functionString, defaultValue, optionsParameterName) {\n            var indexOfMapFrom = AutoMapperHelper.getFunctionCallIndex(functionString, 'mapFrom', optionsParameterName);\n            if (indexOfMapFrom < 0) {\n                return defaultValue;\n            }\n            var indexOfMapFromStart = functionString.indexOf('(', indexOfMapFrom) + 1;\n            var indexOfMapFromEnd = functionString.indexOf(')', indexOfMapFromStart);\n            if (indexOfMapFromStart < 0 || indexOfMapFromEnd < 0) {\n                return defaultValue;\n            }\n            var mapFromString = functionString.substring(indexOfMapFromStart, indexOfMapFromEnd).replace(/'/g, '').replace(/\"/g, '').trim();\n            return mapFromString === null || mapFromString === ''\n                ? defaultValue\n                : mapFromString;\n        };\n        AutoMapperHelper.getFunctionCallIndex = function (functionString, functionToLookFor, optionsParameterName) {\n            var indexOfFunctionCall = functionString.indexOf(optionsParameterName + '.' + functionToLookFor);\n            if (indexOfFunctionCall < 0) {\n                indexOfFunctionCall = functionString.indexOf('.' + functionToLookFor);\n            }\n            return indexOfFunctionCall;\n        };\n        AutoMapperHelper.getConditionFromFunction = function (func, sourceProperty) {\n            // Since we are calling the valueOrFunction function to determine whether to ignore or map from another property, we\n            // want to prevent the call to be error prone when the end user uses the '(opts)=> opts.sourceObject.sourcePropertyName'\n            // syntax. We don't actually have a source object when creating a mapping; therefore, we 'stub' a source object for the\n            // function call.\n            var sourceObject = {};\n            sourceObject[sourceProperty] = {};\n            var condition;\n            // calling the function will result in calling our stubbed ignore() and mapFrom() functions if used inside the function.\n            var configFuncOptions = {\n                ignore: function () {\n                    // do nothing\n                },\n                condition: function (predicate) {\n                    condition = predicate;\n                },\n                mapFrom: function (sourcePropertyName) {\n                    // do nothing\n                },\n                sourceObject: sourceObject,\n                sourcePropertyName: sourceProperty,\n                intermediatePropertyValue: {}\n            };\n            try {\n                func(configFuncOptions);\n            }\n            catch (exc) {\n            }\n            return condition;\n        };\n        return AutoMapperHelper;\n    }());\n    AutoMapperJs.AutoMapperHelper = AutoMapperHelper;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperHelper.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AutoMapper configuration validator.\n     */\n    var AutoMapperValidator = (function () {\n        function AutoMapperValidator() {\n        }\n        /**\n         * Validates mapping configuration by dry-running. Since JS does not\n         * fully support typing, it only checks if properties match on both\n         * sides. The function needs IMapping.sourceTypeClass and\n         * IMapping.destinationTypeClass to function.\n         * @param {boolean} strictMode Whether or not to fail when properties\n         *                             sourceTypeClass or destinationTypeClass\n         *                             are unavailable.\n         */\n        AutoMapperValidator.assertConfigurationIsValid = function (mappings, strictMode) {\n            for (var key in mappings) {\n                if (!mappings.hasOwnProperty(key)) {\n                    continue;\n                }\n                AutoMapperValidator.assertMappingConfiguration(mappings[key], strictMode);\n            }\n        };\n        AutoMapperValidator.assertMappingConfiguration = function (mapping, strictMode) {\n            var mappingKey = mapping.sourceKey + \"=>\" + mapping.destinationKey;\n            var sourceType = mapping.sourceTypeClass;\n            var destinationType = mapping.destinationTypeClass;\n            var sourceClassName = sourceType ? AutoMapperJs.AutoMapperHelper.getClassName(sourceType) : undefined;\n            var destinationClassName = destinationType ? AutoMapperJs.AutoMapperHelper.getClassName(destinationType) : undefined;\n            if (!sourceType || !destinationType) {\n                if (strictMode === false) {\n                    return;\n                }\n                throw new Error(\"Mapping '\" + mappingKey + \"' cannot be validated, since mapping.sourceType or mapping.destinationType are unspecified.\");\n            }\n            var tryHandle = function (errorMessage) {\n                if (errorMessage) {\n                    throw new Error(\"Mapping '\" + mappingKey + \"' is invalid: \" + errorMessage + \" (source: '\" + sourceClassName + \"', destination: '\" + destinationClassName + \"').\");\n                }\n            };\n            var validatedMembers = new Array();\n            var srcObj = new sourceType();\n            var dstObj = new destinationType();\n            // walk member mappings\n            for (var _i = 0, _a = mapping.properties; _i < _a.length; _i++) {\n                var property = _a[_i];\n                tryHandle(AutoMapperValidator.validatePropertyMapping(property, property.name, srcObj, dstObj));\n                validatedMembers.push(property.name);\n            }\n            // walk source members\n            for (var srcMember in srcObj) {\n                if (!srcObj.hasOwnProperty(srcMember)) {\n                    continue;\n                }\n                if (validatedMembers.indexOf(srcMember) >= 0) {\n                    // already validated\n                    continue;\n                }\n                tryHandle(AutoMapperValidator.validateProperty(srcMember, dstObj));\n                validatedMembers.push(srcMember);\n            }\n            // walk destination members\n            for (var dstMember in dstObj) {\n                if (!dstObj.hasOwnProperty(dstMember)) {\n                    continue;\n                }\n                if (validatedMembers.indexOf(dstMember) >= 0) {\n                    // already validated\n                    continue;\n                }\n                tryHandle(\"Destination member '\" + dstMember + \"' does not exist on source type\");\n            }\n            // /* tslint:disable */\n            // console.error(key);\n            // /* tslint:enable */            \n        };\n        AutoMapperValidator.validatePropertyMapping = function (propertyMapping, member, srcObj, dstObj) {\n            return propertyMapping.sourceMapping\n                ? AutoMapperValidator.validateSourcePropertyMapping(propertyMapping, member, srcObj, dstObj)\n                : AutoMapperValidator.validateDestinationPropertyMapping(propertyMapping, member, srcObj, dstObj);\n        };\n        AutoMapperValidator.validateSourcePropertyMapping = function (propertyMapping, member, srcObj, dstObj) {\n            // a member for which configuration is provided, should exist.\n            if (!srcObj.hasOwnProperty(member)) {\n                return \"Source member '\" + member + \"' is configured, but does not exist on source type\";\n            }\n            // an ignored source member should not exist on the destination type. \n            if (propertyMapping.ignore) {\n                if (dstObj.hasOwnProperty(member)) {\n                    return \"Source member '\" + member + \"' is ignored, but does exist on destination type\";\n                }\n                return undefined;\n            }\n            // a mapped source member should exist on the destination type.\n            if (!dstObj.hasOwnProperty(member)) {\n                return \"Source member '\" + member + \"' is configured to be mapped, but does not exist on destination type\";\n            }\n            //var dstMember = propertyMapping.destinationProperty;\n            return undefined;\n        };\n        AutoMapperValidator.validateDestinationPropertyMapping = function (propertyMapping, member, srcObj, dstObj) {\n            // a member for which configuration is provided, should exist.\n            if (!dstObj.hasOwnProperty(member)) {\n                return \"Destination member '\" + member + \"' is configured, but does not exist on destination type\";\n            }\n            // an ignored destination member should not exist on the source type. \n            if (propertyMapping.ignore) {\n                if (srcObj.hasOwnProperty(member)) {\n                    return \"Destination member '\" + member + \"' is ignored, but does exist on source type\";\n                }\n                return undefined;\n            }\n            // a mapped destination member should exist on the source type.\n            if (!srcObj.hasOwnProperty(member)) {\n                return \"Destination member '\" + member + \"' is configured to be mapped, but does not exist on source type\";\n            }\n            //var dstMember = propertyMapping.destinationProperty;\n            return undefined;\n        };\n        AutoMapperValidator.validateProperty = function (srcMember, dstObj) {\n            if (!dstObj.hasOwnProperty(srcMember)) {\n                return \"Source member '\" + srcMember + \"' is configured to be mapped, but does not exist on destination type\";\n            }\n            return undefined;\n        };\n        return AutoMapperValidator;\n    }());\n    AutoMapperJs.AutoMapperValidator = AutoMapperValidator;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperValidator.js.map\n","var AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    (function (DestinationTransformationType) {\n        DestinationTransformationType[DestinationTransformationType[\"Constant\"] = 1] = \"Constant\";\n        DestinationTransformationType[DestinationTransformationType[\"MemberOptions\"] = 2] = \"MemberOptions\";\n        DestinationTransformationType[DestinationTransformationType[\"AsyncMemberOptions\"] = 4] = \"AsyncMemberOptions\";\n        DestinationTransformationType[DestinationTransformationType[\"SourceMemberOptions\"] = 8] = \"SourceMemberOptions\";\n        DestinationTransformationType[DestinationTransformationType[\"AsyncSourceMemberOptions\"] = 16] = \"AsyncSourceMemberOptions\";\n    })(AutoMapperJs.DestinationTransformationType || (AutoMapperJs.DestinationTransformationType = {}));\n    var DestinationTransformationType = AutoMapperJs.DestinationTransformationType;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperEnumerations.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"TypeConverter.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\n/// <reference path=\"AutoMapperValidator.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AutoMapper implementation, for both creating maps and performing maps. Comparable usage and functionality to the original\n     * .NET AutoMapper library is the pursuit of this implementation.\n     */\n    var AutoMapperBase = (function () {\n        function AutoMapperBase() {\n        }\n        AutoMapperBase.prototype.getMapping = function (mappings, sourceKey, destinationKey) {\n            var srcKey = this.getKey(sourceKey);\n            var dstKey = this.getKey(destinationKey);\n            var mapping = mappings[srcKey + dstKey];\n            if (!mapping) {\n                throw new Error(\"Could not find map object with a source of \" + srcKey + \" and a destination of \" + dstKey);\n            }\n            return mapping;\n        };\n        AutoMapperBase.prototype.getKey = function (keyStringOrType) {\n            if (typeof keyStringOrType === 'string') {\n                return keyStringOrType;\n            }\n            else {\n                return AutoMapperJs.AutoMapperHelper.getClassName(keyStringOrType);\n            }\n        };\n        AutoMapperBase.prototype.isArray = function (sourceObject) {\n            return sourceObject instanceof Array;\n        };\n        AutoMapperBase.prototype.handleArray = function (mapping, sourceArray, itemFunc) {\n            var arrayLength = sourceArray.length;\n            var destinationArray = new Array(sourceArray.length);\n            for (var index = 0; index < arrayLength; index++) {\n                var sourceObject = sourceArray[index];\n                var destinationObject = void 0;\n                if (sourceObject === null || sourceObject === undefined) {\n                    destinationObject = sourceObject;\n                }\n                else {\n                    destinationObject = this.createDestinationObject(mapping.destinationTypeClass);\n                    itemFunc(sourceObject, destinationObject);\n                }\n                destinationArray[index] = destinationObject;\n            }\n            return destinationArray;\n        };\n        AutoMapperBase.prototype.handleItem = function (mapping, sourceObject, destinationObject, propertyFunction) {\n            var sourceProperties = [];\n            var atLeastOnePropertyMapped = false;\n            for (var sourcePropertyName in sourceObject) {\n                if (!sourceObject.hasOwnProperty(sourcePropertyName)) {\n                    continue;\n                }\n                atLeastOnePropertyMapped = true;\n                sourceProperties.push(sourcePropertyName);\n                propertyFunction(sourcePropertyName);\n            }\n            // unsourced properties\n            for (var _i = 0, _a = mapping.properties; _i < _a.length; _i++) {\n                var property = _a[_i];\n                if (sourceProperties.indexOf(property.name) >= 0) {\n                    continue;\n                }\n                atLeastOnePropertyMapped = true;\n                propertyFunction(property.name);\n            }\n            // return null/undefined sourceObject if no properties added\n            if (!atLeastOnePropertyMapped && sourceObject === null || sourceObject === undefined) {\n                return sourceObject;\n            }\n            return destinationObject;\n        };\n        AutoMapperBase.prototype.handleProperty = function (mapping, sourceObject, sourcePropertyName, destinationObject, loopMemberValuesAndFunctions, autoMappingCallbackFunction) {\n            var propertyMapping = this.getMappingProperty(mapping.properties, sourcePropertyName);\n            if (propertyMapping) {\n                this.handlePropertyWithPropertyMapping(mapping, propertyMapping, sourceObject, sourcePropertyName, loopMemberValuesAndFunctions);\n            }\n            else {\n                this.handlePropertyWithAutoMapping(mapping, sourceObject, sourcePropertyName, destinationObject, autoMappingCallbackFunction);\n            }\n        };\n        AutoMapperBase.prototype.setPropertyValue = function (mapping, destinationObject, destinationProperty, destinationPropertyValue) {\n            if (mapping.forAllMemberMappings.length > 0) {\n                for (var _i = 0, _a = mapping.forAllMemberMappings; _i < _a.length; _i++) {\n                    var forAllMemberMapping = _a[_i];\n                    this.handleNestedForAllMemberMappings(destinationObject, destinationProperty, destinationPropertyValue, forAllMemberMapping);\n                }\n            }\n            else {\n                this.setNestedPropertyValue(destinationObject, destinationProperty, destinationPropertyValue);\n            }\n        };\n        AutoMapperBase.prototype.setPropertyValueByName = function (mapping, destinationObject, destinationProperty, destinationPropertyValue) {\n            if (mapping.forAllMemberMappings.length > 0) {\n                for (var _i = 0, _a = mapping.forAllMemberMappings; _i < _a.length; _i++) {\n                    var forAllMemberMapping = _a[_i];\n                    forAllMemberMapping(destinationObject, destinationProperty, destinationPropertyValue);\n                }\n            }\n            else {\n                destinationObject[destinationProperty] = destinationPropertyValue;\n            }\n        };\n        AutoMapperBase.prototype.createDestinationObject = function (destinationType) {\n            // create empty destination object.\n            return destinationType\n                ? new destinationType()\n                : {};\n        };\n        AutoMapperBase.prototype.handleNestedForAllMemberMappings = function (destinationObject, destinationProperty, destinationPropertyValue, forAllMemberMapping) {\n            if (destinationProperty.children && destinationProperty.children.length > 0) {\n                this.setChildPropertyValues(destinationObject, destinationProperty, destinationPropertyValue);\n            }\n            else {\n                forAllMemberMapping(destinationObject, destinationProperty.name, destinationPropertyValue);\n            }\n        };\n        AutoMapperBase.prototype.setNestedPropertyValue = function (destinationObject, destinationProperty, destinationPropertyValue) {\n            if (destinationProperty.children && destinationProperty.children.length > 0) {\n                var isSuccess = this.setChildPropertyValues(destinationObject, destinationProperty, destinationPropertyValue);\n                if (!isSuccess) {\n                    destinationObject[destinationProperty.name] = destinationPropertyValue;\n                }\n                return isSuccess;\n            }\n            else {\n                destinationObject[destinationProperty.name] = destinationPropertyValue;\n                return destinationPropertyValue !== undefined && destinationPropertyValue !== null;\n            }\n        };\n        AutoMapperBase.prototype.setChildPropertyValues = function (destinationObject, destinationProperty, destinationPropertyValue) {\n            var dstObj = {};\n            var destinationAlreadyExists = destinationObject.hasOwnProperty(destinationProperty.name) && destinationObject[destinationProperty.name];\n            var isSuccess;\n            for (var index = 0, count = destinationProperty.children.length; index < count; index++) {\n                var tmpObj = {};\n                var child = destinationProperty.children[index];\n                var isChildSucces = this.setNestedPropertyValue(tmpObj, child, destinationPropertyValue);\n                if (isChildSucces) {\n                    dstObj[child.name] = tmpObj[child.name];\n                }\n                isSuccess = isSuccess || isChildSucces;\n            }\n            if (isSuccess) {\n                if (destinationAlreadyExists) {\n                    for (var child_1 in dstObj) {\n                        if (!dstObj.hasOwnProperty(child_1)) {\n                            continue;\n                        }\n                        destinationObject[destinationProperty.name][child_1] = dstObj[child_1];\n                    }\n                }\n                else {\n                    destinationObject[destinationProperty.name] = dstObj;\n                }\n            }\n            return destinationAlreadyExists || isSuccess;\n        };\n        AutoMapperBase.prototype.getMappingProperty = function (properties, sourcePropertyName) {\n            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n                var property = properties_1[_i];\n                if (property.name === sourcePropertyName) {\n                    return property;\n                }\n            }\n            return null;\n        };\n        AutoMapperBase.prototype.handlePropertyWithAutoMapping = function (mapping, sourceObject, sourcePropertyName, destinationObject, autoMappingCallbackFunction) {\n            // no forMember mapping exists, auto map properties, except for the situation where ignoreAllNonExisting is specified.\n            if (mapping.ignoreAllNonExisting) {\n                return;\n            }\n            if (mapping.destinationTypeClass && Object.keys(destinationObject).indexOf(sourcePropertyName) < 0) {\n                return;\n            }\n            var objectValue = null;\n            var isNestedObject = false;\n            if (typeof destinationObject[sourcePropertyName] === 'object' && destinationObject[sourcePropertyName]) {\n                isNestedObject = (destinationObject[sourcePropertyName].constructor.name !== 'Object');\n                if (isNestedObject) {\n                    this\n                        .createMap(sourceObject[sourcePropertyName].constructor.name, destinationObject[sourcePropertyName].constructor.name)\n                        .convertToType(destinationObject[sourcePropertyName].constructor);\n                    objectValue = this.map(sourceObject[sourcePropertyName].constructor.name, destinationObject[sourcePropertyName].constructor.name, sourceObject[sourcePropertyName]);\n                }\n            }\n            // use profile mapping when specified; otherwise, specify source property name as destination property name.\n            var destinationPropertyName = this.getDestinationPropertyName(mapping.profile, sourcePropertyName);\n            var destinationPropertyValue = this.getDestinationPropertyValue(sourceObject, sourcePropertyName, objectValue, isNestedObject);\n            this.setPropertyValueByName(mapping, destinationObject, destinationPropertyName, destinationPropertyValue);\n            if (autoMappingCallbackFunction) {\n                autoMappingCallbackFunction(destinationPropertyValue);\n            }\n        };\n        AutoMapperBase.prototype.getDestinationPropertyValue = function (sourceObject, sourcePropertyName, objectValue, isNestedObject) {\n            if (isNestedObject) {\n                return objectValue;\n            }\n            return sourceObject ? sourceObject[sourcePropertyName] : null;\n        };\n        AutoMapperBase.prototype.handlePropertyWithPropertyMapping = function (mapping, propertyMapping, sourceObject, sourcePropertyName, loopMemberValuesAndFunctions) {\n            // a forMember mapping exists\n            var ignore = propertyMapping.ignore, conditionFunction = propertyMapping.conditionFunction, children = propertyMapping.children, destinations = propertyMapping.destinations, conversionValuesAndFunctions = propertyMapping.conversionValuesAndFunctions;\n            if (children) {\n                var childSourceObject = sourceObject[propertyMapping.name];\n                for (var index = 0; index < children.length; index++) {\n                    var child = children[index];\n                    this.handlePropertyWithPropertyMapping(mapping, child, childSourceObject, child.name, loopMemberValuesAndFunctions);\n                }\n            }\n            // ignore ignored properties\n            if (ignore) {\n                return;\n            }\n            // check for condition function\n            if (conditionFunction) {\n                // and, if there, return when the condition is not met.\n                if (conditionFunction(sourceObject) === false) {\n                    return;\n                }\n            }\n            // it makes no sense to handle a property without destination(s).\n            if (!destinations) {\n                return;\n            }\n            var memberConfigurationOptions = {\n                mapFrom: function () {\n                    // no action required, just here as a stub to prevent calling a non-existing 'opts.mapFrom()' function.\n                },\n                condition: function (predicate) {\n                    // no action required, just here as a stub to prevent calling a non-existing 'opts.mapFrom()' function.\n                },\n                sourceObject: sourceObject,\n                sourcePropertyName: sourcePropertyName,\n                intermediatePropertyValue: sourceObject ? sourceObject[sourcePropertyName] : sourceObject\n            };\n            loopMemberValuesAndFunctions(destinations, conversionValuesAndFunctions, memberConfigurationOptions);\n        };\n        AutoMapperBase.prototype.getDestinationPropertyName = function (profile, sourcePropertyName) {\n            if (!profile) {\n                return sourcePropertyName;\n            }\n            // TODO BL no support yet for INamingConvention.splittingCharacter\n            try {\n                // First, split the source property name based on the splitting expression.\n                // TODO BL Caching of RegExp splitting!\n                var sourcePropertyNameParts = sourcePropertyName.split(profile.sourceMemberNamingConvention.splittingExpression);\n                // NOTE BL For some reason, splitting by (my ;)) RegExp results in empty strings in the array; remove them.\n                for (var index = sourcePropertyNameParts.length - 1; index >= 0; index--) {\n                    if (sourcePropertyNameParts[index] === '') {\n                        sourcePropertyNameParts.splice(index, 1);\n                    }\n                }\n                return profile.destinationMemberNamingConvention.transformPropertyName(sourcePropertyNameParts);\n            }\n            catch (error) {\n                return sourcePropertyName;\n            }\n        };\n        return AutoMapperBase;\n    }());\n    AutoMapperJs.AutoMapperBase = AutoMapperBase;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperBase.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"AutoMapper.ts\" />\n/// <reference path=\"TypeConverter.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\n/// <reference path=\"AutoMapperValidator.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AsyncAutoMapper implementation, for asynchronous mapping support when using AutoMapper.\n     */\n    var AsyncAutoMapper = (function (_super) {\n        __extends(AsyncAutoMapper, _super);\n        function AsyncAutoMapper() {\n            _super.call(this);\n            AsyncAutoMapper.asyncInstance = this;\n        }\n        AsyncAutoMapper.prototype.createMap = function (sourceKeyOrType, destinationKeyOrType) {\n            throw new Error('Method AsyncAutoMapper.createMap is not implemented.');\n        };\n        AsyncAutoMapper.prototype.createMapForMember = function (property, func, metadata) {\n            var _this = this;\n            var mapping = property.metadata.mapping;\n            mapping.async = true;\n            mapping.mapItemFunction = function (m, srcObj, dstObj, cb) { return _this.mapItem(m, srcObj, dstObj, cb); };\n            property.async = true;\n            property.conversionValuesAndFunctions.push(func);\n        };\n        AsyncAutoMapper.prototype.createMapConvertUsing = function (mapping, converterFunction) {\n            var _this = this;\n            mapping.async = true;\n            mapping.typeConverterFunction = converterFunction;\n            mapping.mapItemFunction = function (m, srcObj, dstObj, cb) { return _this.mapItemUsingTypeConverter(m, srcObj, dstObj, cb); };\n        };\n        AsyncAutoMapper.prototype.map = function (mappings, sourceKey, destinationKey, sourceObject, callback) {\n            var _this = this;\n            switch (arguments.length) {\n                case 5:\n                    this.mapWithMapping(_super.prototype.getMapping.call(this, mappings, sourceKey, destinationKey), sourceObject, callback);\n                    return;\n                // provide performance optimized (preloading) currying support.\n                case 4:\n                    return function (cb) { return _this.mapWithMapping(_super.prototype.getMapping.call(_this, mappings, sourceKey, destinationKey), sourceObject, cb); };\n                case 3:\n                    return function (srcObj, cb) { return _this.mapWithMapping(_super.prototype.getMapping.call(_this, mappings, sourceKey, destinationKey), srcObj, cb); };\n                case 2:\n                    return function (dstKey, srcObj, cb) { return _this.map(mappings, sourceKey, dstKey, srcObj, cb); };\n                default:\n                    throw new Error('The AsyncAutoMapper.map function expects between 2 and 5 parameters, you provided ' + arguments.length + '.');\n            }\n        };\n        AsyncAutoMapper.prototype.mapWithMapping = function (mapping, sourceObject, callback) {\n            if (_super.prototype.isArray.call(this, sourceObject)) {\n                this.mapArray(mapping, sourceObject, callback);\n                return;\n            }\n            return mapping.mapItemFunction(mapping, sourceObject, _super.prototype.createDestinationObject.call(this, mapping.destinationTypeClass), callback);\n        };\n        /**\n         * Execute a mapping from the source array to a new destination array with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param mapping The mapping configuration for the current mapping keys/types.\n         * @param sourceArray The source array to map.\n         * @returns {Array<any>} Destination array.\n         */\n        AsyncAutoMapper.prototype.mapArray = function (mapping, sourceArray, callback) {\n            var callbacksToGo = 0;\n            var destinationArray = _super.prototype.handleArray.call(this, mapping, sourceArray, function (sourceObject, destinationObject) {\n                callbacksToGo++;\n                mapping.mapItemFunction(mapping, sourceObject, destinationObject, function (result) {\n                    callbacksToGo--;\n                });\n            });\n            var waitForCallbackToSend = function () {\n                if (callbacksToGo === 0) {\n                    callback(destinationArray);\n                }\n                else {\n                    setTimeout(function () {\n                        waitForCallbackToSend();\n                    }, 10 * callbacksToGo);\n                }\n            };\n            waitForCallbackToSend();\n        };\n        AsyncAutoMapper.prototype.mapItemUsingTypeConverter = function (mapping, sourceObject, destinationObject, callback) {\n            var resolutionContext = {\n                sourceValue: sourceObject,\n                destinationValue: destinationObject\n            };\n            mapping.typeConverterFunction(resolutionContext, callback);\n        };\n        /**\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param mapping The mapping configuration for the current mapping keys/types.\n         * @param sourceObject The source object to map.\n         * @param destinationObject The destination object to map to.\n         * @param callback The callback to call after async mapping has been executed.\n         */\n        AsyncAutoMapper.prototype.mapItem = function (mapping, sourceObject, destinationObject, callback) {\n            var _this = this;\n            var callbacksToGo = 0;\n            _super.prototype.handleItem.call(this, mapping, sourceObject, destinationObject, function (sourceProperty) {\n                callbacksToGo++;\n                _this.mapProperty(mapping, sourceObject, sourceProperty, destinationObject, function (result) {\n                    callbacksToGo--;\n                });\n            });\n            var waitForCallbackToSend = function () {\n                if (callbacksToGo === 0) {\n                    callback(destinationObject);\n                }\n                else {\n                    setTimeout(function () {\n                        waitForCallbackToSend();\n                    }, 10 * callbacksToGo);\n                }\n            };\n            waitForCallbackToSend();\n        };\n        /**\n         * Execute a mapping from the source object property to the destination object property with explicit mapping configuration and supplied mapping options.\n         * @param mapping The mapping configuration for the current mapping keys/types.\n         * @param sourceObject The source object to map.\n         * @param sourcePropertyName The source property to map.\n         * @param destinationObject The destination object to map to.\n         * @param callback The callback to call after async property mapping has been executed.\n         */\n        AsyncAutoMapper.prototype.mapProperty = function (mapping, sourceObject, sourceProperty, destinationObject, callback) {\n            var _this = this;\n            _super.prototype.handleProperty.call(this, mapping, sourceObject, sourceProperty, destinationObject, function (destinations, valuesAndFunctions, opts) {\n                _this.handlePropertyMappings(valuesAndFunctions, opts, function (destinationPropertyValue) {\n                    for (var _i = 0, destinations_1 = destinations; _i < destinations_1.length; _i++) {\n                        var destination = destinations_1[_i];\n                        _super.prototype.setPropertyValue.call(_this, mapping, destinationObject, destination, destinationPropertyValue);\n                    }\n                    callback(destinationPropertyValue);\n                });\n            }, function (destinationPropertyValue) {\n                callback(destinationPropertyValue);\n            });\n        };\n        AsyncAutoMapper.prototype.handlePropertyMappings = function (valuesAndFunctions, opts, callback) {\n            var _this = this;\n            if (!valuesAndFunctions || valuesAndFunctions.length === 0) {\n                callback(opts.intermediatePropertyValue);\n                return;\n            }\n            var valueOrFunction = valuesAndFunctions[0];\n            if (typeof valueOrFunction === 'function') {\n                this.handlePropertyMappingFunction(valueOrFunction, opts, function (result) {\n                    if (typeof result !== 'undefined') {\n                        opts.intermediatePropertyValue = result;\n                        // recursively walk values/functions\n                        _this.handlePropertyMappings(valuesAndFunctions.slice(1), opts, callback);\n                    }\n                });\n            }\n            else {\n                // valueOrFunction is a value\n                opts.intermediatePropertyValue = valueOrFunction;\n                // recursively walk values/functions\n                this.handlePropertyMappings(valuesAndFunctions.slice(1), opts, callback);\n            }\n        };\n        AsyncAutoMapper.prototype.handlePropertyMappingFunction = function (func, opts, callback) {\n            // check if function is asynchronous\n            var args = AutoMapperJs.AutoMapperHelper.getFunctionParameters(func.toString());\n            if (args.length === 2) {\n                func(opts, callback);\n                return;\n            }\n            callback(func(opts));\n        };\n        AsyncAutoMapper.asyncInstance = new AsyncAutoMapper();\n        return AsyncAutoMapper;\n    }(AutoMapperJs.AutoMapperBase));\n    AutoMapperJs.AsyncAutoMapper = AsyncAutoMapper;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AsyncAutoMapper.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"AutoMapperEnumerations.ts\" />\n/// <reference path=\"AutoMapperBase.ts\" />\n/// <reference path=\"AsyncAutoMapper.ts\" />\n/// <reference path=\"TypeConverter.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\n/// <reference path=\"AutoMapperValidator.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    var AutoMapper = (function (_super) {\n        __extends(AutoMapper, _super);\n        /**\n         * This class is intended to be a Singleton. Preferrably use getInstance()\n         * function instead of using the constructor directly from code.\n         */\n        function AutoMapper() {\n            _super.call(this);\n            if (AutoMapper._instance) {\n                return AutoMapper._instance;\n            }\n            else {\n                AutoMapper._instance = this;\n                this._profiles = {};\n                this._mappings = {};\n                this._asyncMapper = new AutoMapperJs.AsyncAutoMapper();\n            }\n        }\n        AutoMapper.getInstance = function () {\n            return AutoMapper._instance;\n        };\n        /**\n         * Initializes the mapper with the supplied configuration.\n         * @param {(config: IConfiguration) => void} configFunction Configuration function to call.\n         */\n        AutoMapper.prototype.initialize = function (configFunction) {\n            var that = this;\n            var configuration = {\n                addProfile: function (profile) {\n                    profile.configure();\n                    that._profiles[profile.profileName] = profile;\n                },\n                createMap: function (sourceKey, destinationKey) {\n                    // pass through using arguments to keep createMap's currying support fully functional.\n                    return that.createMap.apply(that, arguments);\n                }\n            };\n            configFunction(configuration);\n        };\n        /**\n         * Create a mapping profile.\n         * @param {string} sourceKey The map source key.\n         * @param {string} destinationKey The map destination key.\n         * @returns {Core.ICreateMapFluentFunctions}\n         */\n        AutoMapper.prototype.createMap = function (sourceKeyOrType, destinationKeyOrType) {\n            // provide currying support.\n            if (arguments.length < 2) {\n                return AutoMapperJs.AutoMapperHelper.handleCurrying(this.createMap, arguments, this);\n            }\n            var mapping = this.createMappingObjectForGivenKeys(sourceKeyOrType, destinationKeyOrType);\n            return this.createMapGetFluentApiFunctions(mapping);\n        };\n        /**\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param sourceKey Source key, for instance the source type name.\n         * @param destinationKey Destination key, for instance the destination type name.\n         * @param sourceObject The source object to map.\n         * @returns {any} Destination object.\n         */\n        AutoMapper.prototype.map = function (sourceKeyOrType, destinationKeyOrType, sourceObject) {\n            var _this = this;\n            if (arguments.length === 3) {\n                return this.mapInternal(_super.prototype.getMapping.call(this, this._mappings, sourceKeyOrType, destinationKeyOrType), sourceObject);\n            }\n            // provide performance optimized (preloading) currying support.\n            if (arguments.length === 2) {\n                return function (srcObj) { return _this.mapInternal(_super.prototype.getMapping.call(_this, _this._mappings, sourceKeyOrType, destinationKeyOrType), srcObj); };\n            }\n            if (arguments.length === 1) {\n                return function (dstKey, srcObj) { return _this.map(sourceKeyOrType, dstKey, srcObj); };\n            }\n            return function (srcKey, dstKey, srcObj) { return _this.map(srcKey, dstKey, srcObj); };\n        };\n        /**\n         * Execute an asynchronous mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param sourceKey Source key, for instance the source type name.\n         * @param destinationKey Destination key, for instance the destination type name.\n         * @param sourceObject The source object to map.\n         * @param {IMapCallback} callback The callback to call when asynchronous mapping is complete.\n         */\n        AutoMapper.prototype.mapAsync = function (sourceKeyOrType, destinationKeyOrType, sourceObject, callback) {\n            switch (arguments.length) {\n                case 4:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType, destinationKeyOrType, sourceObject, callback);\n                case 3:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType, destinationKeyOrType, sourceObject);\n                case 2:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType, destinationKeyOrType);\n                case 1:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType);\n                default:\n                    throw new Error('The mapAsync function expects between 1 and 4 parameters, you provided ' + arguments.length + '.');\n            }\n        };\n        /**\n         * Validates mapping configuration by dry-running. Since JS does not fully support typing, it only checks if properties match on both\n         * sides. The function needs IMapping.sourceTypeClass and IMapping.destinationTypeClass to function.\n         * @param {boolean} strictMode Whether or not to fail when properties sourceTypeClass or destinationTypeClass are unavailable.\n         */\n        AutoMapper.prototype.assertConfigurationIsValid = function (strictMode) {\n            if (strictMode === void 0) { strictMode = true; }\n            AutoMapperJs.AutoMapperValidator.assertConfigurationIsValid(this._mappings, strictMode);\n        };\n        AutoMapper.prototype.createMapForMember = function (parameters) {\n            var mapping = parameters.mapping, destinationProperty = parameters.destinationProperty, conversionValueOrFunction = parameters.conversionValueOrFunction, sourceMapping = parameters.sourceMapping, fluentFunctions = parameters.fluentFunctions;\n            var metadata = AutoMapperJs.AutoMapperHelper.getMappingMetadataFromTransformationFunction(destinationProperty, conversionValueOrFunction, sourceMapping);\n            var property;\n            if (!sourceMapping) {\n                property = this.getPropertyByDestinationProperty(mapping.properties, destinationProperty);\n            }\n            if (!property) {\n                property = this.getOrCreateProperty({\n                    propertyNameParts: metadata.source.split('.'),\n                    mapping: mapping,\n                    propertyArray: mapping.properties,\n                    parent: null,\n                    destination: destinationProperty,\n                    sourceMapping: sourceMapping\n                });\n            }\n            if (this.createMapForMemberHandleIgnore(property, metadata)) {\n                return fluentFunctions;\n            }\n            if (metadata.async) {\n                this._asyncMapper.createMapForMember(property, conversionValueOrFunction, metadata);\n                return fluentFunctions;\n            }\n            this.createMapForMemberHandleMapFrom(property, metadata);\n            property.conditionFunction = metadata.condition;\n            property.conversionValuesAndFunctions.push(conversionValueOrFunction);\n            return fluentFunctions;\n        };\n        AutoMapper.prototype.createMapForMemberHandleMapFrom = function (property, metadata) {\n            if (metadata.source === metadata.destination) {\n                return;\n            }\n            var _a = property.metadata, mapping = _a.mapping, root = _a.root;\n            var sourceNameParts = metadata.source.split('.');\n            if (sourceNameParts.length === property.level) {\n                this.updatePropertyName(sourceNameParts, property);\n                return;\n            }\n            // check if only one destination on property root. in that case, rebase property and overwrite root.\n            if (root.metadata.destinationCount !== 1) {\n                throw new Error('Rebasing properties with multiple destinations is not yet implemented.');\n            }\n            var propertyRootIndex = mapping.properties.indexOf(root);\n            mapping.properties[propertyRootIndex] = undefined;\n            var propArray = [];\n            var newProperty = this.getOrCreateProperty({\n                propertyNameParts: metadata.source.split('.'),\n                mapping: mapping,\n                propertyArray: propArray,\n                destination: metadata.destination,\n                sourceMapping: metadata.sourceMapping\n            });\n            newProperty.conditionFunction = property.conditionFunction;\n            newProperty.conversionValuesAndFunctions = property.conversionValuesAndFunctions;\n            mapping.properties[propertyRootIndex] = propArray[0];\n        };\n        AutoMapper.prototype.updatePropertyName = function (sourceNameParts, property) {\n            property.name = sourceNameParts[sourceNameParts.length - 1];\n            if (sourceNameParts.length === 1) {\n                return;\n            }\n            this.updatePropertyName(sourceNameParts.splice(0, 1), property.metadata.parent);\n        };\n        AutoMapper.prototype.createMapForMemberHandleIgnore = function (property, metadata) {\n            if (property.ignore || metadata.ignore) {\n                // source name will always be destination name when ignoring.\n                property.name = metadata.destination;\n                property.ignore = true;\n                property.async = false;\n                property.destinations = null;\n                property.conversionValuesAndFunctions = [];\n                return true;\n            }\n            return false;\n        };\n        AutoMapper.prototype.getPropertyByDestinationProperty = function (properties, destinationPropertyName) {\n            if (properties === null || properties === undefined) {\n                return null;\n            }\n            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n                var srcProp = properties_1[_i];\n                if (srcProp.metadata.destinations !== null && srcProp.metadata.destinations !== undefined) {\n                    for (var destination in srcProp.metadata.destinations) {\n                        if (destination === destinationPropertyName) {\n                            return srcProp.metadata.destinations[destination].source;\n                        }\n                    }\n                }\n                var childProp = this.getPropertyByDestinationProperty(srcProp.children, destinationPropertyName);\n                if (childProp != null) {\n                    return childProp;\n                }\n            }\n            return null;\n        };\n        AutoMapper.prototype.getOrCreateProperty = function (parameters) {\n            var propertyNameParts = parameters.propertyNameParts, mapping = parameters.mapping, parent = parameters.parent, propertyArray = parameters.propertyArray, destination = parameters.destination, sourceMapping = parameters.sourceMapping;\n            var name = propertyNameParts[0];\n            var property = this.getPropertyFromArray(name, propertyArray);\n            if (!property) {\n                property = this.createProperty({\n                    name: name,\n                    parent: parent,\n                    propertyArray: propertyArray,\n                    sourceMapping: sourceMapping,\n                    mapping: mapping\n                });\n            }\n            if (propertyNameParts.length === 1) {\n                this.addPropertyDestination(property, destination, mapping, sourceMapping);\n                return property;\n            }\n            if (!property.children) {\n                property.children = [];\n            }\n            // nested call\n            return this.getOrCreateProperty({\n                propertyNameParts: propertyNameParts.slice(1),\n                mapping: mapping,\n                propertyArray: property.children,\n                parent: property,\n                destination: destination,\n                sourceMapping: sourceMapping\n            });\n        };\n        AutoMapper.prototype.getPropertyFromArray = function (name, properties) {\n            if (properties) {\n                for (var _i = 0, properties_2 = properties; _i < properties_2.length; _i++) {\n                    var child = properties_2[_i];\n                    if (child.name === name) {\n                        return child;\n                    }\n                }\n            }\n            return null;\n        };\n        AutoMapper.prototype.addPropertyDestination = function (property, destination, mapping, sourceMapping) {\n            if (!destination) {\n                return;\n            }\n            var destinationTargetArray = property.destinations ? property.destinations : [];\n            var dstProp = this.getOrCreateProperty({\n                propertyNameParts: destination.split('.'),\n                mapping: mapping,\n                propertyArray: destinationTargetArray,\n                sourceMapping: sourceMapping\n            });\n            if (destinationTargetArray.length > 0) {\n                property.metadata.root.metadata.destinations[destination] = { source: property, destination: dstProp };\n                property.metadata.root.metadata.destinationCount++;\n                property.destinations = destinationTargetArray;\n            }\n        };\n        AutoMapper.prototype.createProperty = function (parameters) {\n            var name = parameters.name, parent = parameters.parent, propertyArray = parameters.propertyArray, sourceMapping = parameters.sourceMapping, mapping = parameters.mapping;\n            var property = {\n                name: name,\n                metadata: {\n                    mapping: mapping,\n                    root: parent ? parent.metadata.root : null,\n                    parent: parent,\n                    destinations: {},\n                    destinationCount: 0\n                },\n                sourceMapping: sourceMapping,\n                level: !parent ? 1 : parent.level + 1,\n                ignore: false,\n                async: false,\n                conversionValuesAndFunctions: []\n            };\n            if (property.metadata.root === null) {\n                property.metadata.root = property;\n            }\n            if (propertyArray) {\n                propertyArray.push(property);\n            }\n            return property;\n        };\n        AutoMapper.prototype.createMapForSourceMember = function (mapping, fluentFunc, srcProp, cnf) {\n            if (typeof cnf !== 'function') {\n                throw new Error('Configuration of forSourceMember has to be a function with one (sync) or two (async) options parameters.');\n            }\n            return this.createMapForMember({\n                mapping: mapping,\n                fluentFunctions: fluentFunc,\n                destinationProperty: srcProp,\n                conversionValueOrFunction: cnf,\n                sourceMapping: true\n            });\n        };\n        AutoMapper.prototype.createMapForAllMembers = function (mapping, fluentFunc, func) {\n            mapping.forAllMemberMappings.push(func);\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapIgnoreAllNonExisting = function (mapping, fluentFunc) {\n            mapping.ignoreAllNonExisting = true;\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapConvertToType = function (mapping, fluentFunc, typeClass) {\n            if (mapping.destinationTypeClass) {\n                throw new Error('Destination type class can only be set once.');\n            }\n            mapping.destinationTypeClass = typeClass;\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapConvertUsing = function (mapping, tcClassOrFunc) {\n            try {\n                // check if sync: TypeConverter instance\n                if (tcClassOrFunc instanceof AutoMapperJs.TypeConverter) {\n                    this.configureSynchronousConverterFunction(mapping, tcClassOrFunc.convert);\n                    return;\n                }\n                var functionParameters = AutoMapperJs.AutoMapperHelper.getFunctionParameters(tcClassOrFunc.toString());\n                switch (functionParameters.length) {\n                    case 0:\n                        // check if sync: TypeConverter class definition\n                        var typeConverter;\n                        try {\n                            typeConverter = (new tcClassOrFunc());\n                        }\n                        catch (e) {\n                        }\n                        if (typeConverter instanceof AutoMapperJs.TypeConverter) {\n                            this.configureSynchronousConverterFunction(mapping, typeConverter.convert);\n                            return;\n                        }\n                        break;\n                    case 1:\n                        // sync: function with resolutionContext parameter\n                        this.configureSynchronousConverterFunction(mapping, tcClassOrFunc);\n                        return;\n                    case 2:\n                        // check if async: function with resolutionContext and callback parameters\n                        this._asyncMapper.createMapConvertUsing(mapping, tcClassOrFunc);\n                        return;\n                }\n                // okay, just try feeding the function to the configure function anyway...\n                this.configureSynchronousConverterFunction(mapping, tcClassOrFunc);\n            }\n            catch (e) {\n                throw new Error(\"The value provided for typeConverterClassOrFunction is invalid. \" + e);\n            }\n            throw new Error(\"The value provided for typeConverterClassOrFunction is invalid.\");\n        };\n        AutoMapper.prototype.configureSynchronousConverterFunction = function (mapping, converterFunc) {\n            var _this = this;\n            if (!converterFunc || AutoMapperJs.AutoMapperHelper.getFunctionParameters(converterFunc.toString()).length !== 1) {\n                throw new Error('The function provided does not provide exactly one (resolutionContext) parameter.');\n            }\n            mapping.typeConverterFunction = converterFunc;\n            mapping.mapItemFunction = function (m, srcObj, dstObj) { return _this.mapItemUsingTypeConverter(m, srcObj, dstObj); };\n        };\n        AutoMapper.prototype.createMapWithProfile = function (mapping, profileName) {\n            // check if given profile exists\n            var profile = this._profiles[profileName];\n            if (typeof profile === 'undefined' || profile.profileName !== profileName) {\n                throw new Error(\"Could not find profile with profile name '\" + profileName + \"'.\");\n            }\n            mapping.profile = profile;\n            // merge mappings\n            this.createMapWithProfileMergeMappings(mapping, profileName);\n        };\n        AutoMapper.prototype.createMapWithProfileMergeMappings = function (mapping, profileName) {\n            var profileMappingKey = profileName + \"=>\" + mapping.sourceKey + profileName + \"=>\" + mapping.destinationKey;\n            var profileMapping = this._mappings[profileMappingKey];\n            if (!profileMapping) {\n                return;\n            }\n            // append forAllMemberMappings calls to the original array.\n            if (profileMapping.forAllMemberMappings.length > 0) {\n                (_a = mapping.forAllMemberMappings).push.apply(_a, profileMapping.forAllMemberMappings);\n            }\n            // overwrite original type converter function\n            if (profileMapping.typeConverterFunction) {\n                mapping.typeConverterFunction = profileMapping.typeConverterFunction;\n            }\n            // overwrite original type converter function\n            if (profileMapping.destinationTypeClass) {\n                mapping.destinationTypeClass = profileMapping.destinationTypeClass;\n            }\n            // walk through all the profile's property mappings\n            for (var _i = 0, _b = profileMapping.properties; _i < _b.length; _i++) {\n                var property = _b[_i];\n                this.mergeProperty(mapping, mapping.properties, property);\n            }\n            var _a;\n        };\n        AutoMapper.prototype.mergeProperty = function (mapping, properties, property) {\n            var overwritten = false;\n            for (var index = 0; index < mapping.properties.length; index++) {\n                var existing = mapping.properties[index];\n                if (existing.name === property.name) {\n                    // in which case, we overwrite that one with the profile's property mapping.\n                    // okay, maybe a bit rude, but real merging is pretty complex and you should\n                    // probably not want to combine normal and profile createMap.forMember calls.\n                    mapping.properties[index] = property;\n                    overwritten = true;\n                }\n            }\n            if (overwritten === false) {\n                mapping.properties.push(property);\n            }\n        };\n        AutoMapper.prototype.mapInternal = function (mapping, sourceObject) {\n            if (mapping.async) {\n                throw new Error('Impossible to use asynchronous mapping using automapper.map(); use automapper.mapAsync() instead.');\n            }\n            if (_super.prototype.isArray.call(this, sourceObject)) {\n                return this.mapArray(mapping, sourceObject);\n            }\n            return mapping.mapItemFunction(mapping, sourceObject, _super.prototype.createDestinationObject.call(this, mapping.destinationTypeClass));\n        };\n        AutoMapper.prototype.mapArray = function (mapping, sourceArray) {\n            var destinationArray = _super.prototype.handleArray.call(this, mapping, sourceArray, function (sourceObject, destinationObject) {\n                mapping.mapItemFunction(mapping, sourceObject, destinationObject);\n            });\n            return destinationArray;\n        };\n        AutoMapper.prototype.mapItem = function (mapping, sourceObject, destinationObject) {\n            var _this = this;\n            destinationObject = _super.prototype.handleItem.call(this, mapping, sourceObject, destinationObject, function (propertyName) {\n                _this.mapProperty(mapping, sourceObject, destinationObject, propertyName);\n            });\n            return destinationObject;\n        };\n        AutoMapper.prototype.mapItemUsingTypeConverter = function (mapping, sourceObject, destinationObject, arrayIndex) {\n            var resolutionContext = {\n                sourceValue: sourceObject,\n                destinationValue: destinationObject\n            };\n            return mapping.typeConverterFunction(resolutionContext);\n        };\n        AutoMapper.prototype.mapProperty = function (mapping, sourceObject, destinationObject, sourceProperty) {\n            var _this = this;\n            _super.prototype.handleProperty.call(this, mapping, sourceObject, sourceProperty, destinationObject, function (destinations, valuesAndFunctions, opts) {\n                var destinationPropertyValue = _this.handlePropertyMappings(valuesAndFunctions, opts);\n                for (var _i = 0, destinations_1 = destinations; _i < destinations_1.length; _i++) {\n                    var destination = destinations_1[_i];\n                    _super.prototype.setPropertyValue.call(_this, mapping, destinationObject, destination, destinationPropertyValue);\n                }\n            });\n        };\n        AutoMapper.prototype.handlePropertyMappings = function (valuesAndFunctions, opts) {\n            if (!valuesAndFunctions || valuesAndFunctions.length === 0) {\n                return opts.intermediatePropertyValue;\n            }\n            var valueOrFunction = valuesAndFunctions[0];\n            if (typeof valueOrFunction === 'function') {\n                var result = valueOrFunction(opts);\n                if (typeof result !== 'undefined') {\n                    opts.intermediatePropertyValue = result;\n                }\n                // recursively walk values/functions\n                return this.handlePropertyMappings(valuesAndFunctions.slice(1), opts);\n            }\n            else {\n                // valueOrFunction is a value\n                opts.intermediatePropertyValue = valueOrFunction;\n                // recursively walk values/functions\n                return this.handlePropertyMappings(valuesAndFunctions.slice(1), opts);\n            }\n        };\n        AutoMapper.prototype.createMappingObjectForGivenKeys = function (srcKeyOrType, dstKeyOrType) {\n            var _this = this;\n            var mapping = {\n                sourceKey: _super.prototype.getKey.call(this, srcKeyOrType),\n                destinationKey: _super.prototype.getKey.call(this, dstKeyOrType),\n                forAllMemberMappings: new Array(),\n                properties: [],\n                propertiesNew: [],\n                typeConverterFunction: undefined,\n                mapItemFunction: function (m, srcObj, dstObj) { return _this.mapItem(m, srcObj, dstObj); },\n                sourceTypeClass: (typeof srcKeyOrType === 'string' ? undefined : srcKeyOrType),\n                destinationTypeClass: (typeof dstKeyOrType === 'string' ? undefined : dstKeyOrType),\n                profile: undefined,\n                async: false\n            };\n            this._mappings[mapping.sourceKey + mapping.destinationKey] = mapping;\n            return mapping;\n        };\n        AutoMapper.prototype.createMapGetFluentApiFunctions = function (mapping) {\n            var _this = this;\n            // create a fluent interface / method chaining (e.g. automapper.createMap().forMember().forMember() ...)\n            var fluentFunc = {\n                forMember: function (prop, valFunc) {\n                    _this.createMapForMemberNewVersion({\n                        mapping: mapping,\n                        propertyName: prop,\n                        transformation: valFunc,\n                        sourceMapping: false,\n                        fluentFunctions: fluentFunc\n                    });\n                    return _this.createMapForMember({\n                        mapping: mapping,\n                        fluentFunctions: fluentFunc,\n                        destinationProperty: prop,\n                        conversionValueOrFunction: valFunc,\n                        sourceMapping: false\n                    });\n                },\n                forSourceMember: function (prop, cfgFunc) {\n                    _this.createMapForMemberNewVersion({\n                        mapping: mapping,\n                        propertyName: prop,\n                        transformation: cfgFunc,\n                        sourceMapping: true,\n                        fluentFunctions: fluentFunc\n                    });\n                    return _this.createMapForSourceMember(mapping, fluentFunc, prop, cfgFunc);\n                },\n                forAllMembers: function (func) {\n                    return _this.createMapForAllMembers(mapping, fluentFunc, func);\n                },\n                ignoreAllNonExisting: function () { return _this.createMapIgnoreAllNonExisting(mapping, fluentFunc); },\n                convertToType: function (type) { return _this.createMapConvertToType(mapping, fluentFunc, type); },\n                convertUsing: function (tcClassOrFunc) {\n                    return _this.createMapConvertUsing(mapping, tcClassOrFunc);\n                },\n                withProfile: function (profile) { return _this.createMapWithProfile(mapping, profile); }\n            };\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapForMemberNewVersion = function (parameters) {\n            var mapping = parameters.mapping, propertyName = parameters.propertyName, transformation = parameters.transformation, sourceMapping = parameters.sourceMapping, fluentFunctions = parameters.fluentFunctions;\n            // extract source/destination property names\n            var metadata = AutoMapperJs.AutoMapperHelper.getMappingMetadataFromTransformationFunction(propertyName, transformation, sourceMapping);\n            this.validateForMemberParameters(metadata);\n            var source = metadata.source, destination = metadata.destination;\n            // create property (regardless of current existance)\n            var property = this.createSourceProperty(metadata, null);\n            // merge with existing property or add property\n            if (!this.mergeSourceProperty(property, mapping.propertiesNew, sourceMapping)) {\n                mapping.propertiesNew.push(property);\n            }\n            return fluentFunctions;\n        };\n        AutoMapper.prototype.validateForMemberParameters = function (metadata) {\n            if (!metadata.sourceMapping) {\n                return;\n            }\n            // validate forSourceMember parameters\n            if (metadata.transformation.transformationType === AutoMapperJs.DestinationTransformationType.Constant) {\n                throw new Error('Configuration of forSourceMember has to be a function with one (sync) or two (async) options parameters.');\n            }\n        };\n        AutoMapper.prototype.createSourceProperty = function (metadata, parent) {\n            var level = !parent ? 0 : parent.level + 1;\n            var sourceNameParts = metadata.source.split('.');\n            if (level >= sourceNameParts.length) {\n                return null;\n            }\n            var source = {\n                name: sourceNameParts[level],\n                sourcePropertyName: metadata.source,\n                destinationPropertyName: metadata.destination,\n                parent: parent,\n                level: level,\n                children: [],\n                destination: null\n            };\n            if ((level + 1) < sourceNameParts.length) {\n                // recursively add child source properties ...\n                var child = this.createSourceProperty(metadata, source);\n                if (child) {\n                    source.children.push(child);\n                }\n                source.destination = null;\n            }\n            else {\n                // ... or (!) add destination\n                source.destination = this.createDestinationProperty(metadata, null);\n            }\n            return source;\n        };\n        AutoMapper.prototype.createDestinationProperty = function (metadata, parent) {\n            var level = !parent ? 0 : parent.level + 1;\n            var destinationNameParts = metadata.destination.split('.');\n            if (level >= destinationNameParts.length) {\n                return null;\n            }\n            var destination = {\n                name: destinationNameParts[level],\n                sourcePropertyName: metadata.source,\n                destinationPropertyName: metadata.destination,\n                parent: parent,\n                level: level,\n                child: null,\n                transformations: [],\n                ignore: false,\n                sourceMapping: false\n            };\n            if ((level + 1) < destinationNameParts.length) {\n                // recursively add child destination properties\n                destination.child = this.createDestinationProperty(metadata, destination);\n            }\n            else {\n                // add/merge properties\n                destination.sourceMapping = metadata.sourceMapping;\n                destination.ignore = metadata.ignore;\n                destination.transformations.push(metadata.transformation);\n            }\n            return destination;\n        };\n        AutoMapper.prototype.mergeSourceProperty = function (property, existingProperties, sourceMapping) {\n            // find source property\n            var existing = sourceMapping\n                ? this.findProperty(property.name, existingProperties)\n                : this.matchSourcePropertyByDestination(property, existingProperties);\n            if (!existing) {\n                return false;\n            }\n            if (property.destination) {\n                if (existing.children.length > 0) {\n                    var existingDestination = this.getDestinationProperty(existing.destinationPropertyName, existing);\n                    // existing is (further) nested => rebase and/or merge\n                    if (this.handleMapFromProperties(property, existing)) {\n                        // merge and rebase existing destination to current source level\n                        if (!this.mergeDestinationProperty(property.destination, existingDestination)) {\n                            return false;\n                        }\n                        existing.destination = existingDestination;\n                        existing.children = [];\n                        return true;\n                    }\n                    // merge property.destination with existing mapFrom() destination (don't care about nesting depth here)\n                    return this.mergeDestinationProperty(property.destination, existingDestination);\n                }\n                // both are at same level => simple merge.\n                if (!this.mergeDestinationProperty(property.destination, existing.destination)) {\n                    return false;\n                }\n                this.handleMapFromProperties(property, existing);\n                return true;\n            }\n            if (property.children.length > 0) {\n                // new source is (further) nested.\n                if (existing.children.length > 0) {\n                    // both have further nesting, delegate merging child(ren) by recursively calling this function.\n                    for (var _i = 0, _a = property.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        if (!this.mergeSourceProperty(child, existing.children, sourceMapping)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                // existing is not (further) nested. this is always a mapFrom() situation. \n                if (property.sourcePropertyName !== existing.sourcePropertyName) {\n                    var newDestination = this.getDestinationProperty(existing.destinationPropertyName, property);\n                    if (property.destinationPropertyName !== property.sourcePropertyName) {\n                        // this is a mapFrom() registration. In that case:\n                        // 1) merge destinations, 2) add source child and 3) move destination to (youngest) child\n                        // NOTE special mergeDestinationProperty call => we use the new destination as 'target',\n                        //      because that will save us trouble overwriting ;)...\n                        if (!this.mergeDestinationProperty(existing.destination, newDestination)) {\n                            return false;\n                        }\n                        existing.children = property.children;\n                        existing.name = property.name;\n                        existing.sourcePropertyName = property.sourcePropertyName;\n                        // TODO Should never be necessary (test): existing.destinationPropertyName = property.destinationPropertyName;\n                        return true;\n                    }\n                    // ... nope, it is a destination which has previously been registered using mapFrom. just merge\n                    return this.mergeDestinationProperty(newDestination, existing.destination);\n                }\n            }\n            throw new Error('TODO TEST AND REMOVE => Source property should have destination or child(ren)');\n        };\n        /**\n         * handle property naming when the current property to merge is a mapFrom property\n         */\n        AutoMapper.prototype.handleMapFromProperties = function (property, existingProperty) {\n            if (property.destinationPropertyName === property.sourcePropertyName ||\n                property.sourcePropertyName === existingProperty.sourcePropertyName) {\n                return false;\n            }\n            // only overwrite name when a mapFrom situation applies\n            existingProperty.name = property.name;\n            existingProperty.sourcePropertyName = property.sourcePropertyName;\n            // TODO Should never be necessary (test) => existingProperty.destinationPropertyName = property.destinationPropertyName;\n            return true;\n        };\n        AutoMapper.prototype.getDestinationProperty = function (destinationPropertyName, existingSource) {\n            if (existingSource.destination) {\n                return existingSource.destination;\n            }\n            if (existingSource.children) {\n                for (var _i = 0, _a = existingSource.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    var destination = this.getDestinationProperty(destinationPropertyName, child);\n                    if (destination) {\n                        return destination;\n                    }\n                }\n            }\n            return null;\n        };\n        AutoMapper.prototype.mergeDestinationProperty = function (destination, existingDestination) {\n            if (destination.child) {\n                if (existingDestination.child) {\n                    // both have further nesting, delegate merging children by recursively calling this function.\n                    if (!this.mergeDestinationProperty(destination.child, existingDestination.child)) {\n                        return false;\n                    }\n                    this.handleMapFromProperties(destination, existingDestination);\n                    return true;\n                }\n                // the current destination is not (further) nested. a destination property registration has one of both: \n                // a) children or b) transformations. returning false will cause creating a duplicate source property entry instead.\n                return false;\n            }\n            if (existingDestination.sourceMapping !== destination.sourceMapping &&\n                existingDestination.sourcePropertyName !== destination.sourcePropertyName) {\n                // unable to perform mapFrom() on a property which is being registered using forSourceMember.\n                return false; // TODO: Unpredictable? Idea: throw new Error('Unable to perform mapFrom() on a property which is being registered using forSourceMember.');\n            }\n            // merge destination properties\n            existingDestination.sourceMapping = destination.sourceMapping;\n            existingDestination.ignore = destination.ignore;\n            for (var _i = 0, _a = destination.transformations; _i < _a.length; _i++) {\n                var transformation = _a[_i];\n                existingDestination.transformations.push(transformation);\n            }\n            this.handleMapFromProperties(destination, existingDestination);\n            return true;\n        };\n        AutoMapper.prototype.matchSourcePropertyByDestination = function (source, properties) {\n            if (!properties) {\n                return null;\n            }\n            for (var _i = 0, properties_3 = properties; _i < properties_3.length; _i++) {\n                var property = properties_3[_i];\n                if (property.destinationPropertyName === source.destinationPropertyName) {\n                    return property;\n                }\n            }\n            return null;\n        };\n        AutoMapper.prototype.findProperty = function (name, properties) {\n            if (!properties) {\n                return null;\n            }\n            for (var _i = 0, properties_4 = properties; _i < properties_4.length; _i++) {\n                var property = properties_4[_i];\n                if (property.name === name) {\n                    return property;\n                }\n            }\n            return null;\n        };\n        AutoMapper._instance = new AutoMapper();\n        return AutoMapper;\n    }(AutoMapperJs.AutoMapperBase));\n    AutoMapperJs.AutoMapper = AutoMapper;\n})(AutoMapperJs || (AutoMapperJs = {}));\n// Add AutoMapper to the application's global scope. Of course, you could still use Core.AutoMapper.getInstance() as well.\nvar automapper = (function (app) {\n    app.automapper = AutoMapperJs.AutoMapper.getInstance();\n    return app.automapper;\n})(this);\n\n//# sourceMappingURL=AutoMapper.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"../../src/ts/AutoMapper.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * Converts source type to destination type instead of normal member mapping\n     */\n    var Profile = (function () {\n        function Profile() {\n        }\n        /**\n         * Implement this method in a derived class and call the CreateMap method to associate that map with this profile.\n         * Avoid calling the AutoMapper class / automapper instance from this method.\n         */\n        Profile.prototype.configure = function () {\n            // do nothing\n        };\n        /**\n         * Create a mapping profile.\n         * @param {string} sourceKey The map source key.\n         * @param {string} destinationKey The map destination key.\n         * @returns {Core.ICreateMapFluentFunctions}\n         */\n        Profile.prototype.createMap = function (sourceKey, destinationKey) {\n            var argsCopy = Array.prototype.slice.apply(arguments);\n            for (var index = 0, length = argsCopy.length; index < length; index++) {\n                if (!argsCopy[index]) {\n                    continue;\n                }\n                // prefix sourceKey and destinationKey with 'profileName=>'\n                argsCopy[index] = this.profileName + \"=>\" + argsCopy[index];\n            }\n            // pass through using arguments to keep createMap's currying support fully functional.\n            return automapper.createMap.apply(automapper, argsCopy);\n        };\n        return Profile;\n    }());\n    AutoMapperJs.Profile = Profile;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=Profile.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * Converts source type to destination type instead of normal member mapping\n     */\n    var TypeConverter = (function () {\n        function TypeConverter() {\n        }\n        /**\n         * Performs conversion from source to destination type.\n         * @param {IResolutionContext} resolutionContext Resolution context.\n         * @returns {any} Destination object.\n         */\n        TypeConverter.prototype.convert = function (resolutionContext) {\n            // NOTE BL Unfortunately, TypeScript/JavaScript do not support abstract base classes.\n            //         This is just one way around, please convince me about a better solution.\n            throw new Error('The TypeConverter.convert method is abstract. Use a TypeConverter extension class instead.');\n        };\n        return TypeConverter;\n    }());\n    AutoMapperJs.TypeConverter = TypeConverter;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=TypeConverter.js.map\n","/// <reference path=\"../../../dist/automapper-interfaces.d.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    var CamelCaseNamingConvention = (function () {\n        function CamelCaseNamingConvention() {\n            this.splittingExpression = /(^[a-z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\n            this.separatorCharacter = '';\n        }\n        CamelCaseNamingConvention.prototype.transformPropertyName = function (sourcePropertyNameParts) {\n            // Transform the splitted parts.\n            var result = '';\n            for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\n                if (index === 0) {\n                    result += sourcePropertyNameParts[index].charAt(0).toLowerCase() +\n                        sourcePropertyNameParts[index].substr(1);\n                }\n                else {\n                    result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\n                        sourcePropertyNameParts[index].substr(1);\n                }\n            }\n            return result;\n        };\n        return CamelCaseNamingConvention;\n    }());\n    AutoMapperJs.CamelCaseNamingConvention = CamelCaseNamingConvention;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=CamelCaseNamingConvention.js.map\n","/// <reference path=\"../../../dist/automapper-interfaces.d.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    var PascalCaseNamingConvention = (function () {\n        function PascalCaseNamingConvention() {\n            this.splittingExpression = /(^[A-Z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\n            this.separatorCharacter = '';\n        }\n        PascalCaseNamingConvention.prototype.transformPropertyName = function (sourcePropertyNameParts) {\n            // Transform the splitted parts.\n            var result = '';\n            for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\n                result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\n                    sourcePropertyNameParts[index].substr(1);\n            }\n            return result;\n        };\n        return PascalCaseNamingConvention;\n    }());\n    AutoMapperJs.PascalCaseNamingConvention = PascalCaseNamingConvention;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=PascalCaseNamingConvention.js.map\n"]}