var AutoMapperJs;!function(e){"use strict";var r=function(){function r(){if(r.instance)throw new Error("Instantiation failed: Use getInstance() function instead of constructor function.");r.instance=this,this.mappings={}}return r.getInstance=function(){return r.instance},r.prototype.createMap=function(e,r){var t=this,n=e+r,o={key:n,forAllMemberMappings:new Array,forMemberMappings:{},typeConverterFunction:void 0,destinationTypeClass:void 0};this.mappings[n]=o;var a={forMember:function(e,r){return t.createMapForMember(o,a,e,r)},forSourceMember:function(e,r){return t.createMapForSourceMember(o,a,e,r)},forAllMembers:function(e){return t.createMapForAllMembers(o,a,e)},convertToType:function(e){return t.createMapConvertToType(o,a,e)},convertUsing:function(e){return t.createMapConvertUsing(o,e)}};return a},r.prototype.map=function(e,r,t){var n=e+r,o=this.mappings[n];if(!o)throw new Error("Could not find map object with a source of "+e+" and a destination of "+r);return t instanceof Array?this.mapArray(o,t):this.mapItem(o,t)},r.prototype.mapArray=function(e,r){for(var t=new Array,n=0,o=r.length;o>n;n++){var a=r[n],i=this.mapItem(e,a,n);i&&t.push(i)}return t},r.prototype.mapItem=function(e,r,t){void 0===t&&(t=void 0);var n=e.destinationTypeClass?new e.destinationTypeClass:{};if(e.typeConverterFunction){var o={sourceValue:r,destinationValue:n};return e.typeConverterFunction(o)}for(var a in r)r.hasOwnProperty(a)&&this.mapProperty(e,r,a,n);return n},r.prototype.createMapForMember=function(e,r,t,n){var o=!1,a=t,i=n;if("function"==typeof n){var p={ignore:function(){o=!0,i=void 0},mapFrom:function(e){a=e}};n(p)}var u={sourceProperty:a,destinationProperty:t,mappingValueOrFunction:i,destinationMapping:!0,ignore:o};for(var s in e.forMemberMappings)if(e.forMemberMappings.hasOwnProperty(s)){var c=e.forMemberMappings[s];c.destinationProperty===t&&delete e.forMemberMappings[s]}return e.forMemberMappings[a]=u,r},r.prototype.createMapForSourceMember=function(e,r,t,n){var o=!1,a=t,i=n;if("function"!=typeof n)throw new Error("Configuration of forSourceMember has to be a function with one options parameter.");var p={ignore:function(){o=!0,a=void 0,i=void 0}};return n(p),e.forMemberMappings[t]={sourceProperty:t,destinationProperty:a,mappingValueOrFunction:i,destinationMapping:!1,ignore:o},r},r.prototype.createMapForAllMembers=function(e,r,t){return e.forAllMemberMappings.push(t),r},r.prototype.createMapConvertToType=function(e,r,t){return e.destinationTypeClass=t,r},r.prototype.createMapConvertUsing=function(r,t){var n;try{n=1===this.getFunctionParameters(t).length?t:t instanceof e.TypeConverter?t.convert:(new t).convert}catch(o){throw new Error("The value provided for typeConverterClassOrFunction is invalid. Exception: "+o)}if(!n||1!==this.getFunctionParameters(n).length)throw new Error("The value provided for typeConverterClassOrFunction is invalid, because it does not provide exactly one (resolutionContext) parameter.");r.typeConverterFunction=n},r.prototype.mapProperty=function(e,r,t,n){var o=e.forMemberMappings[t];if(o){if(o.ignore)return;var a,i={mapFrom:function(){}};o.destinationMapping&&"function"==typeof o.mappingValueOrFunction?(a=o.mappingValueOrFunction(i),"undefined"==typeof a&&(a=r[o.sourceProperty])):a=o.mappingValueOrFunction,this.mapSetValue(e,n,o.destinationProperty,a)}else this.mapSetValue(e,n,t,r[t])},r.prototype.mapSetValue=function(e,r,t,n){if(e.forAllMemberMappings.length>0)for(var o=0;o<e.forAllMemberMappings.length;o++)e.forAllMemberMappings[o](r,t,n);else r[t]=n},r.prototype.getFunctionParameters=function(e){var r=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,t=/([^\s,]+)/g,n=e.toString().replace(r,""),o=n.slice(n.indexOf("(")+1,n.indexOf(")")).match(t);return null===o&&(o=new Array),o},r.instance=new r,r}();e.AutoMapper=r}(AutoMapperJs||(AutoMapperJs={}));var automapper=function(e){return e.automapper?e.automapper:(e.automapper=AutoMapperJs.AutoMapper.getInstance(),e.automapper)}(this);
var AutoMapperJs;!function(e){"use strict";var t=function(){function e(){}return e.prototype.convert=function(e){throw new Error("The TypeConverter.convert method is abstract. Use a TypeConverter extension class instead.")},e}();e.TypeConverter=t}(AutoMapperJs||(AutoMapperJs={}));
var AutoMapperJs;!function(p){"use strict"}(AutoMapperJs||(AutoMapperJs={}));
var AutoMapperJs;!function(p){"use strict"}(AutoMapperJs||(AutoMapperJs={}));
var AutoMapperJs;!function(p){"use strict"}(AutoMapperJs||(AutoMapperJs={}));
var AutoMapperJs;!function(p){"use strict"}(AutoMapperJs||(AutoMapperJs={}));
var AutoMapperJs;!function(p){"use strict"}(AutoMapperJs||(AutoMapperJs={}));
var AutoMapperJs;!function(p){"use strict"}(AutoMapperJs||(AutoMapperJs={}));