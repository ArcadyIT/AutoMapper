{"version":3,"sources":["AutoMapperHelper.js","AutoMapperValidator.js","AutoMapperEnumerations.js","AutoMapperBase.js","AsyncAutoMapper.js","AutoMapper.js","Profile.js","TypeConverter.js","naming-conventions/CamelCaseNamingConvention.js","naming-conventions/PascalCaseNamingConvention.js"],"names":["AutoMapperJs","AutoMapperHelper","getClassName","classType","name","constructor","className","toString","matchParts","match","length","str","charAt","arr","Error","getFunctionParameters","functionStr","stripComments","argumentNames","functionString","replace","functionParameterNames","slice","indexOf","Array","handleCurrying","func","args","closure","accumulator","moreArgs","alreadyProvidedArgs","stillToCome","previousAlreadyProvidedArgs","previousStillToCome","i","functionCallResult","apply","arguments","argumentsStillToCome","argumentsCopy","prototype","getMappingMetadataFromTransformationFunction","destination","sourceMapping","source","transformation","getDestinationTransformation","condition","ignore","async","parameterNames","optsParamName","getMapFromString","metadata","getIgnoreFromString","getFunctionCallIndex","getConditionFromFunction","isFunction","transformationType","DestinationTransformationType","Constant","constant","AsyncSourceMemberOptions","asyncSourceMemberConfigurationOptionsFunc","SourceMemberOptions","sourceMemberConfigurationOptionsFunc","AsyncMemberOptions","asyncMemberConfigurationOptionsFunc","MemberOptions","memberConfigurationOptionsFunc","optionsParameterName","indexOfIgnore","indexOfMapFromStart","indexOfMapFromEnd","ignoreString","substring","trim","defaultValue","indexOfMapFrom","mapFromString","functionToLookFor","indexOfFunctionCall","sourceProperty","sourceObject","configFuncOptions","predicate","mapFrom","sourcePropertyName","intermediatePropertyValue","exc","AutoMapperValidator","assertConfigurationIsValid","mappings","strictMode","key","hasOwnProperty","assertMappingConfiguration","mapping","mappingKey","sourceKey","destinationKey","sourceType","sourceTypeClass","destinationType","destinationTypeClass","sourceClassName","undefined","destinationClassName","tryHandle","errorMessage","validatedMembers","srcObj","dstObj","_i","_a","properties","property","validatePropertyMapping","push","srcMember","validateProperty","dstMember","propertyMapping","member","destinationProperty","getDestinationProperty","destinationPropertyName","validateSourcePropertyMapping","validateDestinationPropertyMapping","ropertyMapping","existingSource","children","child","this","AutoMapperBase","getMapping","srcKey","getKey","dstKey","keyStringOrType","isArray","handleArray","sourceArray","itemFunc","arrayLength","destinationArray","index","destinationObject","createDestinationObject","handleItem","propertyFunction","atLeastOnePropertyMapped","handleProperty","transformFunction","autoMappingCallbackFunction","propertyMappings","getPropertyMappings","propertyMappings_1","processMappedProperty","handlePropertyWithAutoMapping","setPropertyValue","destinationPropertyValue","forAllMemberMappings","forAllMemberMapping","setPropertyValueByName","shouldProcessDestination","conditionFunction","throwMappingException","message","ignoreAllNonExisting","Object","keys","objectValue","isNestedObject","createMap","convertToType","map","getDestinationPropertyName","profile","getDestinationPropertyValue","sourcePropertyNameParts","split","sourceMemberNamingConvention","splittingExpression","splice","destinationMemberNamingConvention","transformPropertyName","error","result","properties_1","childSourceObject","configurationOptions","createMemberConfigurationOptions","memberConfigurationOptions","__extends","d","b","__","p","create","AsyncAutoMapper","_super","call","asyncInstance","sourceKeyOrType","destinationKeyOrType","createMapForMember","_this","mapItemFunction","m","cb","mapItem","createMapConvertUsing","converterFunction","typeConverterFunction","mapItemUsingTypeConverter","callback","mapWithMapping","mapArray","callbacksToGo","waitForCallbackToSend","setTimeout","resolutionContext","sourceValue","destinationValue","mapProperty","options","transform","success","childDestinationProperty","childDestinationObject","callbackValue","processTransformations","transformations","processTransformation","AutoMapper","_instance","_profiles","_mappings","_asyncMapper","getInstance","initialize","configFunction","that","configuration","addProfile","configure","profileName","createMappingObjectForGivenKeys","createMapGetFluentApiFunctions","mapInternal","mapAsync","createMapForAllMembers","fluentFunc","createMapIgnoreAllNonExisting","createMapConvertToType","typeClass","tcClassOrFunc","configureSynchronousConverterFunction","converterFunc","TypeConverter","convert","functionParameters","typeConverter","e","createMapWithProfile","createMapWithProfileMergeMappings","profileMappingKey","profileMapping","_b","mergeSourceProperty","propertyName","arrayIndex","transformed","srcKeyOrType","dstKeyOrType","forMember","prop","valFunc","fluentFunctions","forSourceMember","cfgFunc","forAllMembers","type","convertUsing","withProfile","parameters","validateForMemberParameters","createSourceProperty","findProperty","parent","level","sourceNameParts","createDestinationProperty","destinationNameParts","existingProperties","existing","matchSourcePropertyByDestination","existingDestination","handleMapFromProperties","mergeDestinationProperty","newDestination","existingProperty","swapTransformations","_c","_d","_e","_f","_g","properties_2","automapper","app","Profile","argsCopy","CamelCaseNamingConvention","separatorCharacter","toLowerCase","substr","toUpperCase","PascalCaseNamingConvention"],"mappings":"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","file":"automapper.min.js","sourcesContent":["/// <reference path=\"AutoMapperEnumerations.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AutoMapper helper functions\n     */\n    var AutoMapperHelper = (function () {\n        function AutoMapperHelper() {\n        }\n        AutoMapperHelper.getClassName = function (classType) {\n            if (classType && classType.name) {\n                return classType.name;\n            }\n            // source: http://stackoverflow.com/a/13914278/702357\n            if (classType && classType.constructor) {\n                var className = classType.toString();\n                if (className) {\n                    // classType.toString() is \"function classType (...) { ... }\"\n                    var matchParts = className.match(/function\\s*(\\w+)/);\n                    if (matchParts && matchParts.length === 2) {\n                        return matchParts[1];\n                    }\n                }\n                // for browsers which have name property in the constructor\n                // of the object, such as chrome\n                if (classType.constructor.name) {\n                    return classType.constructor.name;\n                }\n                if (classType.constructor.toString()) {\n                    var str = classType.constructor.toString();\n                    if (str.charAt(0) === '[') {\n                        // executed if the return of object.constructor.toString() is \"[object objectClass]\"\n                        var arr = str.match(/\\[\\w+\\s*(\\w+)\\]/);\n                    }\n                    else {\n                        // executed if the return of object.constructor.toString() is \"function objectClass () {}\"\n                        // (IE and Firefox)\n                        var arr = str.match(/function\\s*(\\w+)/);\n                    }\n                    if (arr && arr.length === 2) {\n                        return arr[1];\n                    }\n                }\n            }\n            throw new Error(\"Unable to extract class name from type '\" + classType + \"'\");\n        };\n        AutoMapperHelper.getFunctionParameters = function (functionStr) {\n            var stripComments = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n            var argumentNames = /([^\\s,]+)/g;\n            var functionString = functionStr.replace(stripComments, '');\n            var functionParameterNames = functionString.slice(functionString.indexOf('(') + 1, functionString.indexOf(')')).match(argumentNames);\n            if (functionParameterNames === null) {\n                functionParameterNames = new Array();\n            }\n            return functionParameterNames;\n        };\n        AutoMapperHelper.handleCurrying = function (func, args, closure) {\n            var argumentsStillToCome = func.length - args.length;\n            // saved accumulator array\n            // NOTE BL this does not deep copy array objects, only the array itself; should side effects occur, please report (or refactor).\n            var argumentsCopy = Array.prototype.slice.apply(args);\n            function accumulator(moreArgs, alreadyProvidedArgs, stillToCome) {\n                var previousAlreadyProvidedArgs = alreadyProvidedArgs.slice(0); // to reset\n                var previousStillToCome = stillToCome; // to reset\n                for (var i = 0; i < moreArgs.length; i++, stillToCome--) {\n                    alreadyProvidedArgs[alreadyProvidedArgs.length] = moreArgs[i];\n                }\n                if (stillToCome - moreArgs.length <= 0) {\n                    var functionCallResult = func.apply(closure, alreadyProvidedArgs);\n                    // reset vars, so curried function can be applied to new params.\n                    alreadyProvidedArgs = previousAlreadyProvidedArgs;\n                    stillToCome = previousStillToCome;\n                    return functionCallResult;\n                }\n                else {\n                    return function () {\n                        // arguments are params, so closure bussiness is avoided.\n                        return accumulator(arguments, alreadyProvidedArgs.slice(0), stillToCome);\n                    };\n                }\n            }\n            return accumulator([], argumentsCopy, argumentsStillToCome);\n        };\n        AutoMapperHelper.getMappingMetadataFromTransformationFunction = function (destination, func, sourceMapping) {\n            if (typeof func !== 'function') {\n                return {\n                    destination: destination,\n                    source: destination,\n                    transformation: AutoMapperHelper.getDestinationTransformation(func, false, sourceMapping, false),\n                    sourceMapping: sourceMapping,\n                    condition: null,\n                    ignore: false,\n                    async: false\n                };\n            }\n            var functionStr = func.toString();\n            var parameterNames = AutoMapperHelper.getFunctionParameters(functionStr);\n            var optsParamName = parameterNames.length >= 1 ? parameterNames[0] : '';\n            var source = sourceMapping\n                ? destination\n                : AutoMapperHelper.getMapFromString(functionStr, destination, optsParamName);\n            var metadata = {\n                destination: destination,\n                source: source,\n                transformation: AutoMapperHelper.getDestinationTransformation(func, true, sourceMapping, parameterNames.length === 2),\n                sourceMapping: sourceMapping,\n                condition: null,\n                ignore: AutoMapperHelper.getIgnoreFromString(functionStr, destination),\n                async: parameterNames.length === 2\n            };\n            // calling the member options function when used asynchronous would be too 'dangerous'.\n            if (!metadata.async && AutoMapperHelper.getFunctionCallIndex(functionStr, 'condition', optsParamName) >= 0) {\n                metadata.condition = AutoMapperHelper.getConditionFromFunction(func, source);\n            }\n            return metadata;\n        };\n        AutoMapperHelper.getDestinationTransformation = function (func, isFunction, sourceMapping, async) {\n            if (!isFunction) {\n                return {\n                    transformationType: AutoMapperJs.DestinationTransformationType.Constant,\n                    constant: func\n                };\n            }\n            var transformation;\n            if (sourceMapping) {\n                if (async) {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.AsyncSourceMemberOptions,\n                        asyncSourceMemberConfigurationOptionsFunc: func\n                    };\n                }\n                else {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.SourceMemberOptions,\n                        sourceMemberConfigurationOptionsFunc: func\n                    };\n                }\n            }\n            else {\n                if (async) {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.AsyncMemberOptions,\n                        asyncMemberConfigurationOptionsFunc: func\n                    };\n                }\n                else {\n                    transformation = {\n                        transformationType: AutoMapperJs.DestinationTransformationType.MemberOptions,\n                        memberConfigurationOptionsFunc: func\n                    };\n                }\n            }\n            return transformation;\n        };\n        AutoMapperHelper.getIgnoreFromString = function (functionString, optionsParameterName) {\n            var indexOfIgnore = AutoMapperHelper.getFunctionCallIndex(functionString, 'ignore', optionsParameterName);\n            if (indexOfIgnore < 0) {\n                return false;\n            }\n            var indexOfMapFromStart = functionString.indexOf('(', indexOfIgnore) + 1;\n            var indexOfMapFromEnd = functionString.indexOf(')', indexOfMapFromStart);\n            if (indexOfMapFromStart < 0 || indexOfMapFromEnd < 0) {\n                return false;\n            }\n            var ignoreString = functionString.substring(indexOfMapFromStart, indexOfMapFromEnd).replace(/\\r/g, '').replace(/\\n/g, '').trim();\n            return ignoreString === null || ignoreString === ''\n                ? true // <optionsParameterName>.ignore()\n                : false; // <optionsParameterName>.ignore(<ignoreString> -> unexpected content)\n        };\n        AutoMapperHelper.getMapFromString = function (functionString, defaultValue, optionsParameterName) {\n            var indexOfMapFrom = AutoMapperHelper.getFunctionCallIndex(functionString, 'mapFrom', optionsParameterName);\n            if (indexOfMapFrom < 0) {\n                return defaultValue;\n            }\n            var indexOfMapFromStart = functionString.indexOf('(', indexOfMapFrom) + 1;\n            var indexOfMapFromEnd = functionString.indexOf(')', indexOfMapFromStart);\n            if (indexOfMapFromStart < 0 || indexOfMapFromEnd < 0) {\n                return defaultValue;\n            }\n            var mapFromString = functionString.substring(indexOfMapFromStart, indexOfMapFromEnd).replace(/'/g, '').replace(/\"/g, '').trim();\n            return mapFromString === null || mapFromString === ''\n                ? defaultValue\n                : mapFromString;\n        };\n        AutoMapperHelper.getFunctionCallIndex = function (functionString, functionToLookFor, optionsParameterName) {\n            var indexOfFunctionCall = functionString.indexOf(optionsParameterName + '.' + functionToLookFor);\n            if (indexOfFunctionCall < 0) {\n                indexOfFunctionCall = functionString.indexOf('.' + functionToLookFor);\n            }\n            return indexOfFunctionCall;\n        };\n        AutoMapperHelper.getConditionFromFunction = function (func, sourceProperty) {\n            // Since we are calling the valueOrFunction function to determine whether to ignore or map from another property, we\n            // want to prevent the call to be error prone when the end user uses the '(opts)=> opts.sourceObject.sourcePropertyName'\n            // syntax. We don't actually have a source object when creating a mapping; therefore, we 'stub' a source object for the\n            // function call.\n            var sourceObject = {};\n            sourceObject[sourceProperty] = {};\n            var condition;\n            // calling the function will result in calling our stubbed ignore() and mapFrom() functions if used inside the function.\n            var configFuncOptions = {\n                ignore: function () {\n                    // do nothing\n                },\n                condition: function (predicate) {\n                    condition = predicate;\n                },\n                mapFrom: function (sourcePropertyName) {\n                    // do nothing\n                },\n                sourceObject: sourceObject,\n                sourcePropertyName: sourceProperty,\n                intermediatePropertyValue: {}\n            };\n            try {\n                func(configFuncOptions);\n            }\n            catch (exc) {\n            }\n            return condition;\n        };\n        return AutoMapperHelper;\n    }());\n    AutoMapperJs.AutoMapperHelper = AutoMapperHelper;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperHelper.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AutoMapper configuration validator.\n     */\n    var AutoMapperValidator = (function () {\n        function AutoMapperValidator() {\n        }\n        /**\n         * Validates mapping configuration by dry-running. Since JS does not\n         * fully support typing, it only checks if properties match on both\n         * sides. The function needs IMapping.sourceTypeClass and\n         * IMapping.destinationTypeClass to function.\n         * @param {boolean} strictMode Whether or not to fail when properties\n         *                             sourceTypeClass or destinationTypeClass\n         *                             are unavailable.\n         */\n        AutoMapperValidator.assertConfigurationIsValid = function (mappings, strictMode) {\n            for (var key in mappings) {\n                if (!mappings.hasOwnProperty(key)) {\n                    continue;\n                }\n                AutoMapperValidator.assertMappingConfiguration(mappings[key], strictMode);\n            }\n        };\n        AutoMapperValidator.assertMappingConfiguration = function (mapping, strictMode) {\n            var mappingKey = mapping.sourceKey + \"=>\" + mapping.destinationKey;\n            var sourceType = mapping.sourceTypeClass;\n            var destinationType = mapping.destinationTypeClass;\n            var sourceClassName = sourceType ? AutoMapperJs.AutoMapperHelper.getClassName(sourceType) : undefined;\n            var destinationClassName = destinationType ? AutoMapperJs.AutoMapperHelper.getClassName(destinationType) : undefined;\n            if (!sourceType || !destinationType) {\n                if (strictMode === false) {\n                    return;\n                }\n                throw new Error(\"Mapping '\" + mappingKey + \"' cannot be validated, since mapping.sourceType or mapping.destinationType are unspecified.\");\n            }\n            var tryHandle = function (errorMessage) {\n                if (errorMessage) {\n                    throw new Error(\"Mapping '\" + mappingKey + \"' is invalid: \" + errorMessage + \" (source: '\" + sourceClassName + \"', destination: '\" + destinationClassName + \"').\");\n                }\n            };\n            var validatedMembers = new Array();\n            var srcObj = new sourceType();\n            var dstObj = new destinationType();\n            // walk member mappings\n            for (var _i = 0, _a = mapping.properties; _i < _a.length; _i++) {\n                var property = _a[_i];\n                tryHandle(AutoMapperValidator.validatePropertyMapping(property, property.name, srcObj, dstObj));\n                validatedMembers.push(property.name);\n            }\n            // walk source members\n            for (var srcMember in srcObj) {\n                if (!srcObj.hasOwnProperty(srcMember)) {\n                    continue;\n                }\n                if (validatedMembers.indexOf(srcMember) >= 0) {\n                    // already validated\n                    continue;\n                }\n                tryHandle(AutoMapperValidator.validateProperty(srcMember, dstObj));\n                validatedMembers.push(srcMember);\n            }\n            // walk destination members\n            for (var dstMember in dstObj) {\n                if (!dstObj.hasOwnProperty(dstMember)) {\n                    continue;\n                }\n                if (validatedMembers.indexOf(dstMember) >= 0) {\n                    // already validated\n                    continue;\n                }\n                tryHandle(\"Destination member '\" + dstMember + \"' does not exist on source type\");\n            }\n            // /* tslint:disable */\n            // console.error(key);\n            // /* tslint:enable */            \n        };\n        AutoMapperValidator.validatePropertyMapping = function (propertyMapping, member, srcObj, dstObj) {\n            // awkward way of locating sourceMapping ;) ...\n            var destinationProperty = AutoMapperValidator.getDestinationProperty(propertyMapping.destinationPropertyName, propertyMapping);\n            return destinationProperty.sourceMapping\n                ? AutoMapperValidator.validateSourcePropertyMapping(propertyMapping, destinationProperty, member, srcObj, dstObj)\n                : AutoMapperValidator.validateDestinationPropertyMapping(propertyMapping, destinationProperty, member, srcObj, dstObj);\n        };\n        AutoMapperValidator.validateSourcePropertyMapping = function (ropertyMapping, destinationProperty, member, srcObj, dstObj) {\n            // a member for which configuration is provided, should exist.\n            if (!srcObj.hasOwnProperty(member)) {\n                return \"Source member '\" + member + \"' is configured, but does not exist on source type\";\n            }\n            // an ignored source member should not exist on the destination type. \n            if (destinationProperty.ignore) {\n                if (dstObj.hasOwnProperty(member)) {\n                    return \"Source member '\" + member + \"' is ignored, but does exist on destination type\";\n                }\n                return undefined;\n            }\n            // a mapped source member should exist on the destination type.\n            if (!dstObj.hasOwnProperty(member)) {\n                return \"Source member '\" + member + \"' is configured to be mapped, but does not exist on destination type\";\n            }\n            //var dstMember = propertyMapping.destinationProperty;\n            return undefined;\n        };\n        AutoMapperValidator.validateDestinationPropertyMapping = function (propertyMapping, destinationProperty, member, srcObj, dstObj) {\n            // a member for which configuration is provided, should exist.\n            if (!dstObj.hasOwnProperty(member)) {\n                return \"Destination member '\" + member + \"' is configured, but does not exist on destination type\";\n            }\n            // an ignored destination member should not exist on the source type. \n            if (destinationProperty.ignore) {\n                if (srcObj.hasOwnProperty(member)) {\n                    return \"Destination member '\" + member + \"' is ignored, but does exist on source type\";\n                }\n                return undefined;\n            }\n            // a mapped destination member should exist on the source type.\n            if (!srcObj.hasOwnProperty(member)) {\n                return \"Destination member '\" + member + \"' is configured to be mapped, but does not exist on source type\";\n            }\n            //var dstMember = propertyMapping.destinationProperty;\n            return undefined;\n        };\n        AutoMapperValidator.validateProperty = function (srcMember, dstObj) {\n            if (!dstObj.hasOwnProperty(srcMember)) {\n                return \"Source member '\" + srcMember + \"' is configured to be mapped, but does not exist on destination type\";\n            }\n            return undefined;\n        };\n        AutoMapperValidator.getDestinationProperty = function (destinationPropertyName, existingSource) {\n            if (existingSource.destination) {\n                return existingSource.destination;\n            }\n            if (existingSource.children) {\n                for (var _i = 0, _a = existingSource.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    var destination = this.getDestinationProperty(destinationPropertyName, child);\n                    if (destination) {\n                        return destination;\n                    }\n                }\n            }\n            return null;\n        };\n        return AutoMapperValidator;\n    }());\n    AutoMapperJs.AutoMapperValidator = AutoMapperValidator;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperValidator.js.map\n","var AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    (function (DestinationTransformationType) {\n        DestinationTransformationType[DestinationTransformationType[\"Constant\"] = 1] = \"Constant\";\n        DestinationTransformationType[DestinationTransformationType[\"MemberOptions\"] = 2] = \"MemberOptions\";\n        DestinationTransformationType[DestinationTransformationType[\"AsyncMemberOptions\"] = 4] = \"AsyncMemberOptions\";\n        DestinationTransformationType[DestinationTransformationType[\"SourceMemberOptions\"] = 8] = \"SourceMemberOptions\";\n        DestinationTransformationType[DestinationTransformationType[\"AsyncSourceMemberOptions\"] = 16] = \"AsyncSourceMemberOptions\";\n    })(AutoMapperJs.DestinationTransformationType || (AutoMapperJs.DestinationTransformationType = {}));\n    var DestinationTransformationType = AutoMapperJs.DestinationTransformationType;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperEnumerations.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"TypeConverter.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\n/// <reference path=\"AutoMapperValidator.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AutoMapper implementation, for both creating maps and performing maps. Comparable usage and functionality to the original\n     * .NET AutoMapper library is the pursuit of this implementation.\n     */\n    var AutoMapperBase = (function () {\n        function AutoMapperBase() {\n        }\n        AutoMapperBase.prototype.getMapping = function (mappings, sourceKey, destinationKey) {\n            var srcKey = this.getKey(sourceKey);\n            var dstKey = this.getKey(destinationKey);\n            var mapping = mappings[srcKey + dstKey];\n            if (!mapping) {\n                throw new Error(\"Could not find map object with a source of \" + srcKey + \" and a destination of \" + dstKey);\n            }\n            return mapping;\n        };\n        AutoMapperBase.prototype.getKey = function (keyStringOrType) {\n            if (typeof keyStringOrType === 'string') {\n                return keyStringOrType;\n            }\n            else {\n                return AutoMapperJs.AutoMapperHelper.getClassName(keyStringOrType);\n            }\n        };\n        AutoMapperBase.prototype.isArray = function (sourceObject) {\n            return sourceObject instanceof Array;\n        };\n        AutoMapperBase.prototype.handleArray = function (mapping, sourceArray, itemFunc) {\n            var arrayLength = sourceArray.length;\n            var destinationArray = new Array(sourceArray.length);\n            for (var index = 0; index < arrayLength; index++) {\n                var sourceObject = sourceArray[index];\n                var destinationObject = void 0;\n                if (sourceObject === null || sourceObject === undefined) {\n                    destinationObject = sourceObject;\n                }\n                else {\n                    destinationObject = this.createDestinationObject(mapping.destinationTypeClass);\n                    itemFunc(sourceObject, destinationObject);\n                }\n                destinationArray[index] = destinationObject;\n            }\n            return destinationArray;\n        };\n        AutoMapperBase.prototype.handleItem = function (mapping, sourceObject, destinationObject, propertyFunction) {\n            // var sourceProperties: string[] = [];\n            var atLeastOnePropertyMapped = false;\n            // handle mapped properties ...\n            for (var _i = 0, _a = mapping.properties; _i < _a.length; _i++) {\n                var property = _a[_i];\n                // sourceProperties.push(property.name);\n                atLeastOnePropertyMapped = true;\n                propertyFunction(property.name);\n            }\n            // .. and, after that, handle unmapped properties\n            for (var sourcePropertyName in sourceObject) {\n                if (!sourceObject.hasOwnProperty(sourcePropertyName)) {\n                    continue;\n                }\n                if (destinationObject[sourcePropertyName]) {\n                    // ... but, if the destination property already exists, don't map again (probably a mapFrom situation).\n                    continue;\n                }\n                // if (sourceProperties.indexOf(sourcePropertyName) >= 0) {\n                //     continue;\n                // }\n                atLeastOnePropertyMapped = true;\n                propertyFunction(sourcePropertyName);\n            }\n            // return null/undefined sourceObject if no properties added\n            if (!atLeastOnePropertyMapped && (sourceObject === null || sourceObject === undefined)) {\n                return sourceObject;\n            }\n            return destinationObject;\n        };\n        AutoMapperBase.prototype.handleProperty = function (mapping, sourceObject, sourcePropertyName, destinationObject, transformFunction, autoMappingCallbackFunction) {\n            // TODO Property mappings are already located before\n            // TODO handleProperty seems only to be called when processing a mapped property.\n            var propertyMappings = this.getPropertyMappings(mapping.properties, sourcePropertyName);\n            if (propertyMappings.length > 0) {\n                for (var _i = 0, propertyMappings_1 = propertyMappings; _i < propertyMappings_1.length; _i++) {\n                    var propertyMapping = propertyMappings_1[_i];\n                    this.processMappedProperty(mapping, propertyMapping, sourceObject, sourcePropertyName, transformFunction);\n                }\n            }\n            else {\n                this.handlePropertyWithAutoMapping(mapping, sourceObject, sourcePropertyName, destinationObject, autoMappingCallbackFunction);\n            }\n        };\n        AutoMapperBase.prototype.setPropertyValue = function (mapping, destinationProperty, destinationObject, destinationPropertyValue) {\n            if (mapping.forAllMemberMappings.length > 0) {\n                for (var _i = 0, _a = mapping.forAllMemberMappings; _i < _a.length; _i++) {\n                    var forAllMemberMapping = _a[_i];\n                    forAllMemberMapping(destinationObject, destinationProperty.name, destinationPropertyValue);\n                }\n            }\n            else {\n                destinationObject[destinationProperty.name] = destinationPropertyValue;\n            }\n        };\n        AutoMapperBase.prototype.setPropertyValueByName = function (mapping, destinationObject, destinationProperty, destinationPropertyValue) {\n            if (mapping.forAllMemberMappings.length > 0) {\n                for (var _i = 0, _a = mapping.forAllMemberMappings; _i < _a.length; _i++) {\n                    var forAllMemberMapping = _a[_i];\n                    forAllMemberMapping(destinationObject, destinationProperty, destinationPropertyValue);\n                }\n            }\n            else {\n                destinationObject[destinationProperty] = destinationPropertyValue;\n            }\n        };\n        AutoMapperBase.prototype.createDestinationObject = function (destinationType) {\n            // create empty destination object.\n            return destinationType\n                ? new destinationType()\n                : {};\n        };\n        AutoMapperBase.prototype.shouldProcessDestination = function (destination, sourceObject) {\n            if (destination.ignore) {\n                // ignore ignored properties\n                return false;\n            }\n            if (destination.conditionFunction) {\n                // check for condition function, and, if there is ...\n                if (destination.conditionFunction(sourceObject) === false) {\n                    // ... return when the condition is not met.\n                    return false;\n                }\n            }\n            return true;\n        };\n        AutoMapperBase.prototype.throwMappingException = function (propertyMapping, message) {\n            throw new Error(\"Cannot map '\" + propertyMapping.sourcePropertyName + \"' to '\" + propertyMapping.destinationPropertyName + \"' => \" + message);\n        };\n        AutoMapperBase.prototype.handlePropertyWithAutoMapping = function (mapping, sourceObject, sourcePropertyName, destinationObject, autoMappingCallbackFunction) {\n            // no forMember mapping exists, auto map properties, except for the situation where ignoreAllNonExisting is specified.\n            if (mapping.ignoreAllNonExisting) {\n                return;\n            }\n            if (mapping.destinationTypeClass && Object.keys(destinationObject).indexOf(sourcePropertyName) < 0) {\n                return;\n            }\n            var objectValue = null;\n            var isNestedObject = false;\n            if (typeof destinationObject[sourcePropertyName] === 'object' && destinationObject[sourcePropertyName]) {\n                isNestedObject = (destinationObject[sourcePropertyName].constructor.name !== 'Object');\n                if (isNestedObject) {\n                    this\n                        .createMap(sourceObject[sourcePropertyName].constructor.name, destinationObject[sourcePropertyName].constructor.name)\n                        .convertToType(destinationObject[sourcePropertyName].constructor);\n                    objectValue = this.map(sourceObject[sourcePropertyName].constructor.name, destinationObject[sourcePropertyName].constructor.name, sourceObject[sourcePropertyName]);\n                }\n            }\n            // use profile mapping when specified; otherwise, specify source property name as destination property name.\n            var destinationPropertyName = this.getDestinationPropertyName(mapping.profile, sourcePropertyName);\n            var destinationPropertyValue = this.getDestinationPropertyValue(sourceObject, sourcePropertyName, objectValue, isNestedObject);\n            this.setPropertyValueByName(mapping, destinationObject, destinationPropertyName, destinationPropertyValue);\n            if (autoMappingCallbackFunction) {\n                autoMappingCallbackFunction(destinationPropertyValue);\n            }\n        };\n        AutoMapperBase.prototype.getDestinationPropertyValue = function (sourceObject, sourcePropertyName, objectValue, isNestedObject) {\n            if (isNestedObject) {\n                return objectValue;\n            }\n            return sourceObject ? sourceObject[sourcePropertyName] : null;\n        };\n        AutoMapperBase.prototype.getDestinationPropertyName = function (profile, sourcePropertyName) {\n            if (!profile) {\n                return sourcePropertyName;\n            }\n            // TODO BL no support yet for INamingConvention.splittingCharacter\n            try {\n                // First, split the source property name based on the splitting expression.\n                // TODO BL Caching of RegExp splitting!\n                var sourcePropertyNameParts = sourcePropertyName.split(profile.sourceMemberNamingConvention.splittingExpression);\n                // NOTE BL For some reason, splitting by (my ;)) RegExp results in empty strings in the array; remove them.\n                for (var index = sourcePropertyNameParts.length - 1; index >= 0; index--) {\n                    if (sourcePropertyNameParts[index] === '') {\n                        sourcePropertyNameParts.splice(index, 1);\n                    }\n                }\n                return profile.destinationMemberNamingConvention.transformPropertyName(sourcePropertyNameParts);\n            }\n            catch (error) {\n                return sourcePropertyName;\n            }\n        };\n        AutoMapperBase.prototype.getPropertyMappings = function (properties, sourcePropertyName) {\n            var result = [];\n            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n                var property = properties_1[_i];\n                if (property.name === sourcePropertyName) {\n                    result.push(property);\n                }\n            }\n            return result;\n        };\n        AutoMapperBase.prototype.processMappedProperty = function (mapping, propertyMapping, sourceObject, sourcePropertyName, transformFunction) {\n            if (propertyMapping.children && propertyMapping.children.length > 0) {\n                // always pass child source object, even if source object does not exist => \n                // constant transformations should always pass. \n                var childSourceObject = sourceObject ? sourceObject[propertyMapping.name] : null;\n                for (var _i = 0, _a = propertyMapping.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    this.processMappedProperty(mapping, child, childSourceObject, child.name, transformFunction);\n                    return;\n                }\n            }\n            var destination = propertyMapping.destination;\n            if (!propertyMapping.destination) {\n                // it makes no sense to handle a property without destination(s).\n                this.throwMappingException(propertyMapping, 'no destination object');\n            }\n            var configurationOptions = this.createMemberConfigurationOptions(sourceObject, sourcePropertyName);\n            transformFunction(destination, configurationOptions);\n        };\n        AutoMapperBase.prototype.createMemberConfigurationOptions = function (sourceObject, sourcePropertyName) {\n            var memberConfigurationOptions = {\n                mapFrom: function (sourcePropertyName) {\n                    // no action required, just here as a stub to prevent calling a non-existing 'opts.mapFrom(...)' function.\n                },\n                condition: function (predicate) {\n                    // no action required, just here as a stub to prevent calling a non-existing 'opts.condition(...)' function.\n                },\n                ignore: function () {\n                    // no action required, just here as a stub to prevent calling a non-existing 'opts.ignore()' function.\n                },\n                sourceObject: sourceObject,\n                sourcePropertyName: sourcePropertyName,\n                intermediatePropertyValue: sourceObject ? sourceObject[sourcePropertyName] : sourceObject\n            };\n            return memberConfigurationOptions;\n        };\n        return AutoMapperBase;\n    }());\n    AutoMapperJs.AutoMapperBase = AutoMapperBase;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AutoMapperBase.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"AutoMapper.ts\" />\n/// <reference path=\"TypeConverter.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\n/// <reference path=\"AutoMapperValidator.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * AsyncAutoMapper implementation, for asynchronous mapping support when using AutoMapper.\n     */\n    var AsyncAutoMapper = (function (_super) {\n        __extends(AsyncAutoMapper, _super);\n        function AsyncAutoMapper() {\n            _super.call(this);\n            AsyncAutoMapper.asyncInstance = this;\n        }\n        AsyncAutoMapper.prototype.createMap = function (sourceKeyOrType, destinationKeyOrType) {\n            throw new Error('Method AsyncAutoMapper.createMap is not implemented.');\n        };\n        AsyncAutoMapper.prototype.createMapForMember = function (mapping, property) {\n            var _this = this;\n            mapping.async = true;\n            mapping.mapItemFunction = function (m, srcObj, dstObj, cb) { return _this.mapItem(m, srcObj, dstObj, cb); };\n            // property.async = true;\n            // property.conversionValuesAndFunctions.push(func);\n        };\n        AsyncAutoMapper.prototype.createMapConvertUsing = function (mapping, converterFunction) {\n            var _this = this;\n            mapping.async = true;\n            mapping.typeConverterFunction = converterFunction;\n            mapping.mapItemFunction = function (m, srcObj, dstObj, cb) { return _this.mapItemUsingTypeConverter(m, srcObj, dstObj, cb); };\n        };\n        AsyncAutoMapper.prototype.map = function (mappings, sourceKey, destinationKey, sourceObject, callback) {\n            var _this = this;\n            switch (arguments.length) {\n                case 5:\n                    this.mapWithMapping(_super.prototype.getMapping.call(this, mappings, sourceKey, destinationKey), sourceObject, callback);\n                    return;\n                // provide performance optimized (preloading) currying support.\n                case 4:\n                    return function (cb) { return _this.mapWithMapping(_super.prototype.getMapping.call(_this, mappings, sourceKey, destinationKey), sourceObject, cb); };\n                case 3:\n                    return function (srcObj, cb) { return _this.mapWithMapping(_super.prototype.getMapping.call(_this, mappings, sourceKey, destinationKey), srcObj, cb); };\n                case 2:\n                    return function (dstKey, srcObj, cb) { return _this.map(mappings, sourceKey, dstKey, srcObj, cb); };\n                default:\n                    throw new Error('The AsyncAutoMapper.map function expects between 2 and 5 parameters, you provided ' + arguments.length + '.');\n            }\n        };\n        AsyncAutoMapper.prototype.mapWithMapping = function (mapping, sourceObject, callback) {\n            if (_super.prototype.isArray.call(this, sourceObject)) {\n                this.mapArray(mapping, sourceObject, callback);\n                return;\n            }\n            return mapping.mapItemFunction(mapping, sourceObject, _super.prototype.createDestinationObject.call(this, mapping.destinationTypeClass), callback);\n        };\n        /**\n         * Execute a mapping from the source array to a new destination array with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param mapping The mapping configuration for the current mapping keys/types.\n         * @param sourceArray The source array to map.\n         * @returns {Array<any>} Destination array.\n         */\n        AsyncAutoMapper.prototype.mapArray = function (mapping, sourceArray, callback) {\n            var callbacksToGo = 0;\n            var destinationArray = _super.prototype.handleArray.call(this, mapping, sourceArray, function (sourceObject, destinationObject) {\n                callbacksToGo++;\n                mapping.mapItemFunction(mapping, sourceObject, destinationObject, function (result) {\n                    callbacksToGo--;\n                });\n            });\n            var waitForCallbackToSend = function () {\n                if (callbacksToGo === 0) {\n                    callback(destinationArray);\n                }\n                else {\n                    setTimeout(function () {\n                        waitForCallbackToSend();\n                    }, 10 * callbacksToGo);\n                }\n            };\n            waitForCallbackToSend();\n        };\n        AsyncAutoMapper.prototype.mapItemUsingTypeConverter = function (mapping, sourceObject, destinationObject, callback) {\n            var resolutionContext = {\n                sourceValue: sourceObject,\n                destinationValue: destinationObject\n            };\n            mapping.typeConverterFunction(resolutionContext, callback);\n        };\n        /**\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param mapping The mapping configuration for the current mapping keys/types.\n         * @param sourceObject The source object to map.\n         * @param destinationObject The destination object to map to.\n         * @param callback The callback to call after async mapping has been executed.\n         */\n        AsyncAutoMapper.prototype.mapItem = function (mapping, sourceObject, destinationObject, callback) {\n            var _this = this;\n            var callbacksToGo = 0;\n            _super.prototype.handleItem.call(this, mapping, sourceObject, destinationObject, function (sourceProperty) {\n                callbacksToGo++;\n                _this.mapProperty(mapping, sourceObject, sourceProperty, destinationObject, function (result) {\n                    callbacksToGo--;\n                });\n            });\n            var waitForCallbackToSend = function () {\n                if (callbacksToGo === 0) {\n                    callback(destinationObject);\n                }\n                else {\n                    setTimeout(function () {\n                        waitForCallbackToSend();\n                    }, 10 * callbacksToGo);\n                }\n            };\n            waitForCallbackToSend();\n        };\n        /**\n         * Execute a mapping from the source object property to the destination object property with explicit mapping configuration and supplied mapping options.\n         * @param mapping The mapping configuration for the current mapping keys/types.\n         * @param sourceObject The source object to map.\n         * @param sourcePropertyName The source property to map.\n         * @param destinationObject The destination object to map to.\n         * @param callback The callback to call after async property mapping has been executed.\n         */\n        AsyncAutoMapper.prototype.mapProperty = function (mapping, sourceObject, sourceProperty, destinationObject, callback) {\n            var _this = this;\n            _super.prototype.handleProperty.call(this, mapping, sourceObject, sourceProperty, destinationObject, function (destinationProperty, options) {\n                _this.transform(mapping, sourceObject, destinationProperty, destinationObject, options, function (destinationPropertyValue, success) {\n                    callback(destinationPropertyValue);\n                });\n            }, function (destinationPropertyValue) {\n                callback(destinationPropertyValue);\n            });\n        };\n        AsyncAutoMapper.prototype.transform = function (mapping, sourceObject, destinationProperty, destinationObject, options, callback) {\n            var _this = this;\n            var childDestinationProperty = destinationProperty.child;\n            if (childDestinationProperty) {\n                var childDestinationObject = destinationObject[destinationProperty.name];\n                if (!childDestinationObject) {\n                    // no child source object? create. \n                    childDestinationObject = {};\n                }\n                // transform child by recursively calling the transform function.\n                this.transform(mapping, sourceObject, childDestinationProperty, childDestinationObject, options, function (callbackValue, success) {\n                    if (success) {\n                        // only set child destination object when transformation has been successful.\n                        destinationObject[destinationProperty.name] = childDestinationObject;\n                    }\n                    callback(options.intermediatePropertyValue, success);\n                });\n            }\n            if (!_super.prototype.shouldProcessDestination.call(this, destinationProperty, sourceObject)) {\n                callback(options.intermediatePropertyValue, false);\n            }\n            // actually transform destination property.\n            this.processTransformations(destinationProperty, destinationProperty.transformations, options, function (callbackValue, success) {\n                if (success) {\n                    _super.prototype.setPropertyValue.call(_this, mapping, destinationProperty, destinationObject, options.intermediatePropertyValue);\n                }\n                callback(options.intermediatePropertyValue, success);\n            });\n        };\n        AsyncAutoMapper.prototype.processTransformations = function (property, transformations, options, callback) {\n            var _this = this;\n            if (transformations.length === 0) {\n                callback(options.intermediatePropertyValue, true);\n                return;\n            }\n            var transformation = transformations[0];\n            this.processTransformation(property, transformation, options, function (callbackValue, success) {\n                if (!success) {\n                    callback(options.intermediatePropertyValue, false);\n                    return;\n                }\n                _this.processTransformations(property, transformations.slice(1), options, callback);\n            });\n        };\n        AsyncAutoMapper.prototype.processTransformation = function (property, transformation, options, callback) {\n            switch (transformation.transformationType) {\n                case AutoMapperJs.DestinationTransformationType.Constant:\n                    options.intermediatePropertyValue = transformation.constant;\n                    callback(options.intermediatePropertyValue, true);\n                    return;\n                case AutoMapperJs.DestinationTransformationType.MemberOptions: {\n                    var result = transformation.memberConfigurationOptionsFunc(options);\n                    if (typeof result !== 'undefined') {\n                        options.intermediatePropertyValue = result;\n                    }\n                    else if (!options.sourceObject) {\n                        callback(options.intermediatePropertyValue, false);\n                    }\n                    callback(options.intermediatePropertyValue, true);\n                    return;\n                }\n                case AutoMapperJs.DestinationTransformationType.SourceMemberOptions: {\n                    var result = transformation.sourceMemberConfigurationOptionsFunc(options);\n                    if (typeof result !== 'undefined') {\n                        options.intermediatePropertyValue = result;\n                    }\n                    else if (!options.sourceObject) {\n                        callback(options.intermediatePropertyValue, false);\n                        return;\n                    }\n                    callback(options.intermediatePropertyValue, true);\n                    return;\n                }\n                case AutoMapperJs.DestinationTransformationType.AsyncMemberOptions:\n                    transformation.asyncMemberConfigurationOptionsFunc(options, function (result) {\n                        if (typeof result !== 'undefined') {\n                            options.intermediatePropertyValue = result;\n                        }\n                        callback(options.intermediatePropertyValue, true);\n                        return;\n                    });\n                    return;\n                case AutoMapperJs.DestinationTransformationType.AsyncSourceMemberOptions:\n                    transformation.asyncSourceMemberConfigurationOptionsFunc(options, function (result) {\n                        if (typeof result !== 'undefined') {\n                            options.intermediatePropertyValue = result;\n                        }\n                        callback(options.intermediatePropertyValue, true);\n                        return;\n                    });\n                    return;\n                default:\n                    // TODO: this.throwMappingException(property, `AutoMapper.handlePropertyMappings: Unexpected transformation type ${transformation}`);\n                    callback(options.intermediatePropertyValue, false);\n            }\n        };\n        AsyncAutoMapper.asyncInstance = new AsyncAutoMapper();\n        return AsyncAutoMapper;\n    }(AutoMapperJs.AutoMapperBase));\n    AutoMapperJs.AsyncAutoMapper = AsyncAutoMapper;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=AsyncAutoMapper.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"AutoMapperEnumerations.ts\" />\n/// <reference path=\"AutoMapperBase.ts\" />\n/// <reference path=\"AsyncAutoMapper.ts\" />\n/// <reference path=\"TypeConverter.ts\" />\n/// <reference path=\"AutoMapperHelper.ts\" />\n/// <reference path=\"AutoMapperValidator.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    var AutoMapper = (function (_super) {\n        __extends(AutoMapper, _super);\n        /**\n         * This class is intended to be a Singleton. Preferrably use getInstance()\n         * function instead of using the constructor directly from code.\n         */\n        function AutoMapper() {\n            _super.call(this);\n            if (AutoMapper._instance) {\n                return AutoMapper._instance;\n            }\n            else {\n                AutoMapper._instance = this;\n                this._profiles = {};\n                this._mappings = {};\n                this._asyncMapper = new AutoMapperJs.AsyncAutoMapper();\n            }\n        }\n        AutoMapper.getInstance = function () {\n            return AutoMapper._instance;\n        };\n        /**\n         * Initializes the mapper with the supplied configuration.\n         * @param {(config: IConfiguration) => void} configFunction Configuration function to call.\n         */\n        AutoMapper.prototype.initialize = function (configFunction) {\n            var that = this;\n            var configuration = {\n                addProfile: function (profile) {\n                    profile.configure();\n                    that._profiles[profile.profileName] = profile;\n                },\n                createMap: function (sourceKey, destinationKey) {\n                    // pass through using arguments to keep createMap's currying support fully functional.\n                    return that.createMap.apply(that, arguments);\n                }\n            };\n            configFunction(configuration);\n        };\n        /**\n         * Create a mapping profile.\n         * @param {string} sourceKey The map source key.\n         * @param {string} destinationKey The map destination key.\n         * @returns {Core.ICreateMapFluentFunctions}\n         */\n        AutoMapper.prototype.createMap = function (sourceKeyOrType, destinationKeyOrType) {\n            // provide currying support.\n            if (arguments.length < 2) {\n                return AutoMapperJs.AutoMapperHelper.handleCurrying(this.createMap, arguments, this);\n            }\n            var mapping = this.createMappingObjectForGivenKeys(sourceKeyOrType, destinationKeyOrType);\n            return this.createMapGetFluentApiFunctions(mapping);\n        };\n        /**\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param sourceKey Source key, for instance the source type name.\n         * @param destinationKey Destination key, for instance the destination type name.\n         * @param sourceObject The source object to map.\n         * @returns {any} Destination object.\n         */\n        AutoMapper.prototype.map = function (sourceKeyOrType, destinationKeyOrType, sourceObject) {\n            var _this = this;\n            if (arguments.length === 3) {\n                return this.mapInternal(_super.prototype.getMapping.call(this, this._mappings, sourceKeyOrType, destinationKeyOrType), sourceObject);\n            }\n            // provide performance optimized (preloading) currying support.\n            if (arguments.length === 2) {\n                return function (srcObj) { return _this.mapInternal(_super.prototype.getMapping.call(_this, _this._mappings, sourceKeyOrType, destinationKeyOrType), srcObj); };\n            }\n            if (arguments.length === 1) {\n                return function (dstKey, srcObj) { return _this.map(sourceKeyOrType, dstKey, srcObj); };\n            }\n            return function (srcKey, dstKey, srcObj) { return _this.map(srcKey, dstKey, srcObj); };\n        };\n        /**\n         * Execute an asynchronous mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\n         * @param sourceKey Source key, for instance the source type name.\n         * @param destinationKey Destination key, for instance the destination type name.\n         * @param sourceObject The source object to map.\n         * @param {IMapCallback} callback The callback to call when asynchronous mapping is complete.\n         */\n        AutoMapper.prototype.mapAsync = function (sourceKeyOrType, destinationKeyOrType, sourceObject, callback) {\n            switch (arguments.length) {\n                case 4:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType, destinationKeyOrType, sourceObject, callback);\n                case 3:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType, destinationKeyOrType, sourceObject);\n                case 2:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType, destinationKeyOrType);\n                case 1:\n                    return this._asyncMapper.map(this._mappings, sourceKeyOrType);\n                default:\n                    throw new Error('The mapAsync function expects between 1 and 4 parameters, you provided ' + arguments.length + '.');\n            }\n        };\n        /**\n         * Validates mapping configuration by dry-running. Since JS does not fully support typing, it only checks if properties match on both\n         * sides. The function needs IMapping.sourceTypeClass and IMapping.destinationTypeClass to function.\n         * @param {boolean} strictMode Whether or not to fail when properties sourceTypeClass or destinationTypeClass are unavailable.\n         */\n        AutoMapper.prototype.assertConfigurationIsValid = function (strictMode) {\n            if (strictMode === void 0) { strictMode = true; }\n            AutoMapperJs.AutoMapperValidator.assertConfigurationIsValid(this._mappings, strictMode);\n        };\n        AutoMapper.prototype.createMapForAllMembers = function (mapping, fluentFunc, func) {\n            mapping.forAllMemberMappings.push(func);\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapIgnoreAllNonExisting = function (mapping, fluentFunc) {\n            mapping.ignoreAllNonExisting = true;\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapConvertToType = function (mapping, fluentFunc, typeClass) {\n            if (mapping.destinationTypeClass) {\n                throw new Error('Destination type class can only be set once.');\n            }\n            mapping.destinationTypeClass = typeClass;\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapConvertUsing = function (mapping, tcClassOrFunc) {\n            var _this = this;\n            var configureSynchronousConverterFunction = function (converterFunc) {\n                if (!converterFunc || AutoMapperJs.AutoMapperHelper.getFunctionParameters(converterFunc.toString()).length !== 1) {\n                    throw new Error('The function provided does not provide exactly one (resolutionContext) parameter.');\n                }\n                mapping.typeConverterFunction = converterFunc;\n                mapping.mapItemFunction = function (m, srcObj, dstObj) { return _this.mapItemUsingTypeConverter(m, srcObj, dstObj); };\n            };\n            try {\n                // check if sync: TypeConverter instance\n                if (tcClassOrFunc instanceof AutoMapperJs.TypeConverter) {\n                    configureSynchronousConverterFunction(tcClassOrFunc.convert);\n                    return;\n                }\n                var functionParameters = AutoMapperJs.AutoMapperHelper.getFunctionParameters(tcClassOrFunc.toString());\n                switch (functionParameters.length) {\n                    case 0:\n                        // check if sync: TypeConverter class definition\n                        var typeConverter;\n                        try {\n                            typeConverter = (new tcClassOrFunc());\n                        }\n                        catch (e) {\n                        }\n                        if (typeConverter instanceof AutoMapperJs.TypeConverter) {\n                            configureSynchronousConverterFunction(typeConverter.convert);\n                            return;\n                        }\n                        break;\n                    case 1:\n                        // sync: function with resolutionContext parameter\n                        configureSynchronousConverterFunction(tcClassOrFunc);\n                        return;\n                    case 2:\n                        // check if async: function with resolutionContext and callback parameters\n                        this._asyncMapper.createMapConvertUsing(mapping, tcClassOrFunc);\n                        return;\n                }\n                // okay, just try feeding the function to the configure function anyway...\n                configureSynchronousConverterFunction(tcClassOrFunc);\n            }\n            catch (e) {\n                throw new Error(\"The value provided for typeConverterClassOrFunction is invalid. \" + e);\n            }\n            throw new Error(\"The value provided for typeConverterClassOrFunction is invalid.\");\n        };\n        AutoMapper.prototype.createMapWithProfile = function (mapping, profileName) {\n            // check if given profile exists\n            var profile = this._profiles[profileName];\n            if (typeof profile === 'undefined' || profile.profileName !== profileName) {\n                throw new Error(\"Could not find profile with profile name '\" + profileName + \"'.\");\n            }\n            mapping.profile = profile;\n            // merge mappings\n            this.createMapWithProfileMergeMappings(mapping, profileName);\n        };\n        AutoMapper.prototype.createMapWithProfileMergeMappings = function (mapping, profileName) {\n            var profileMappingKey = profileName + \"=>\" + mapping.sourceKey + profileName + \"=>\" + mapping.destinationKey;\n            var profileMapping = this._mappings[profileMappingKey];\n            if (!profileMapping) {\n                return;\n            }\n            // append forAllMemberMappings calls to the original array.\n            if (profileMapping.forAllMemberMappings.length > 0) {\n                (_a = mapping.forAllMemberMappings).push.apply(_a, profileMapping.forAllMemberMappings);\n            }\n            // overwrite original type converter function\n            if (profileMapping.typeConverterFunction) {\n                mapping.typeConverterFunction = profileMapping.typeConverterFunction;\n            }\n            // overwrite original type converter function\n            if (profileMapping.destinationTypeClass) {\n                mapping.destinationTypeClass = profileMapping.destinationTypeClass;\n            }\n            // walk through all the profile's property mappings\n            for (var _i = 0, _b = profileMapping.properties; _i < _b.length; _i++) {\n                var property = _b[_i];\n                // TODO Awkward way of locating sourceMapping ;) ...\n                var sourceMapping = this.getDestinationProperty(property.destinationPropertyName, property).sourceMapping;\n                if (!this.mergeSourceProperty(property, mapping.properties, sourceMapping)) {\n                    mapping.properties.push(property);\n                }\n            }\n            var _a;\n        };\n        AutoMapper.prototype.mapInternal = function (mapping, sourceObject) {\n            if (mapping.async) {\n                throw new Error('Impossible to use asynchronous mapping using automapper.map(); use automapper.mapAsync() instead.');\n            }\n            if (_super.prototype.isArray.call(this, sourceObject)) {\n                return this.mapArray(mapping, sourceObject);\n            }\n            return mapping.mapItemFunction(mapping, sourceObject, _super.prototype.createDestinationObject.call(this, mapping.destinationTypeClass));\n        };\n        AutoMapper.prototype.mapArray = function (mapping, sourceArray) {\n            var destinationArray = _super.prototype.handleArray.call(this, mapping, sourceArray, function (sourceObject, destinationObject) {\n                mapping.mapItemFunction(mapping, sourceObject, destinationObject);\n            });\n            return destinationArray;\n        };\n        AutoMapper.prototype.mapItem = function (mapping, sourceObject, destinationObject) {\n            var _this = this;\n            destinationObject = _super.prototype.handleItem.call(this, mapping, sourceObject, destinationObject, function (propertyName) {\n                _this.mapProperty(mapping, sourceObject, destinationObject, propertyName);\n            });\n            return destinationObject;\n        };\n        AutoMapper.prototype.mapItemUsingTypeConverter = function (mapping, sourceObject, destinationObject, arrayIndex) {\n            var resolutionContext = {\n                sourceValue: sourceObject,\n                destinationValue: destinationObject\n            };\n            return mapping.typeConverterFunction(resolutionContext);\n        };\n        AutoMapper.prototype.mapProperty = function (mapping, sourceObject, destinationObject, sourceProperty) {\n            var _this = this;\n            _super.prototype.handleProperty.call(this, mapping, sourceObject, sourceProperty, destinationObject, function (destinationProperty, options) {\n                return _this.transform(mapping, sourceObject, destinationProperty, destinationObject, options);\n            });\n        };\n        AutoMapper.prototype.transform = function (mapping, sourceObject, destinationProperty, destinationObject, options) {\n            var childDestinationProperty = destinationProperty.child;\n            if (childDestinationProperty) {\n                var childDestinationObject = destinationObject[destinationProperty.name];\n                if (!childDestinationObject) {\n                    // no child source object? create. \n                    childDestinationObject = {};\n                }\n                // transform child by recursively calling the transform function.\n                var transformed = this.transform(mapping, sourceObject, childDestinationProperty, childDestinationObject, options /*, callback*/);\n                if (transformed) {\n                    // only set child destination object when transformation has been successful.\n                    destinationObject[destinationProperty.name] = childDestinationObject;\n                }\n                return transformed;\n            }\n            if (!_super.prototype.shouldProcessDestination.call(this, destinationProperty, sourceObject)) {\n                return false;\n            }\n            // actually transform destination property.\n            for (var _i = 0, _a = destinationProperty.transformations; _i < _a.length; _i++) {\n                var transformation = _a[_i];\n                if (!this.processTransformation(destinationProperty, transformation, options)) {\n                    return false;\n                }\n            }\n            _super.prototype.setPropertyValue.call(this, mapping, destinationProperty, destinationObject, options.intermediatePropertyValue);\n            return true;\n        };\n        AutoMapper.prototype.processTransformation = function (property, transformation, options) {\n            switch (transformation.transformationType) {\n                case AutoMapperJs.DestinationTransformationType.Constant:\n                    options.intermediatePropertyValue = transformation.constant;\n                    return true;\n                case AutoMapperJs.DestinationTransformationType.MemberOptions: {\n                    var result = transformation.memberConfigurationOptionsFunc(options);\n                    if (typeof result !== 'undefined') {\n                        options.intermediatePropertyValue = result;\n                    }\n                    else if (!options.sourceObject) {\n                        return false;\n                    }\n                    return true;\n                }\n                case AutoMapperJs.DestinationTransformationType.SourceMemberOptions: {\n                    var result = transformation.sourceMemberConfigurationOptionsFunc(options);\n                    if (typeof result !== 'undefined') {\n                        options.intermediatePropertyValue = result;\n                    }\n                    else if (!options.sourceObject) {\n                        return false;\n                    }\n                    return true;\n                }\n                case AutoMapperJs.DestinationTransformationType.AsyncMemberOptions:\n                case AutoMapperJs.DestinationTransformationType.AsyncSourceMemberOptions:\n                default:\n                    this.throwMappingException(property, \"AutoMapper.handlePropertyMappings: Unexpected transformation type \" + transformation.transformationType);\n                    return true;\n            }\n        };\n        AutoMapper.prototype.createMappingObjectForGivenKeys = function (srcKeyOrType, dstKeyOrType) {\n            var _this = this;\n            var mapping = {\n                sourceKey: _super.prototype.getKey.call(this, srcKeyOrType),\n                destinationKey: _super.prototype.getKey.call(this, dstKeyOrType),\n                forAllMemberMappings: new Array(),\n                properties: [],\n                typeConverterFunction: undefined,\n                mapItemFunction: function (m, srcObj, dstObj) { return _this.mapItem(m, srcObj, dstObj); },\n                sourceTypeClass: (typeof srcKeyOrType === 'string' ? undefined : srcKeyOrType),\n                destinationTypeClass: (typeof dstKeyOrType === 'string' ? undefined : dstKeyOrType),\n                profile: undefined,\n                async: false\n            };\n            this._mappings[mapping.sourceKey + mapping.destinationKey] = mapping;\n            return mapping;\n        };\n        AutoMapper.prototype.createMapGetFluentApiFunctions = function (mapping) {\n            var _this = this;\n            // create a fluent interface / method chaining (e.g. automapper.createMap().forMember().forMember() ...)\n            var fluentFunc = {\n                forMember: function (prop, valFunc) {\n                    return _this.createMapForMember({ mapping: mapping, propertyName: prop, transformation: valFunc, sourceMapping: false, fluentFunctions: fluentFunc });\n                },\n                forSourceMember: function (prop, cfgFunc) {\n                    return _this.createMapForMember({ mapping: mapping, propertyName: prop, transformation: cfgFunc, sourceMapping: true, fluentFunctions: fluentFunc });\n                },\n                forAllMembers: function (func) {\n                    return _this.createMapForAllMembers(mapping, fluentFunc, func);\n                },\n                ignoreAllNonExisting: function () { return _this.createMapIgnoreAllNonExisting(mapping, fluentFunc); },\n                convertToType: function (type) { return _this.createMapConvertToType(mapping, fluentFunc, type); },\n                convertUsing: function (tcClassOrFunc) {\n                    return _this.createMapConvertUsing(mapping, tcClassOrFunc);\n                },\n                withProfile: function (profile) { return _this.createMapWithProfile(mapping, profile); }\n            };\n            return fluentFunc;\n        };\n        AutoMapper.prototype.createMapForMember = function (parameters) {\n            var mapping = parameters.mapping, propertyName = parameters.propertyName, transformation = parameters.transformation, sourceMapping = parameters.sourceMapping, fluentFunctions = parameters.fluentFunctions;\n            // extract source/destination property names\n            var metadata = AutoMapperJs.AutoMapperHelper.getMappingMetadataFromTransformationFunction(propertyName, transformation, sourceMapping);\n            this.validateForMemberParameters(metadata);\n            var source = metadata.source, destination = metadata.destination;\n            // create property (regardless of current existance)\n            var property = this.createSourceProperty(metadata, null);\n            // merge with existing property or add property\n            if (!this.mergeSourceProperty(property, mapping.properties, sourceMapping)) {\n                mapping.properties.push(property);\n            }\n            if (metadata.async) {\n                this._asyncMapper.createMapForMember(mapping, this.findProperty(property.name, mapping.properties));\n            }\n            return fluentFunctions;\n        };\n        AutoMapper.prototype.validateForMemberParameters = function (metadata) {\n            if (!metadata.sourceMapping) {\n                return;\n            }\n            // validate forSourceMember parameters\n            if (metadata.transformation.transformationType === AutoMapperJs.DestinationTransformationType.Constant) {\n                throw new Error('Configuration of forSourceMember has to be a function with one (sync) or two (async) options parameters.');\n            }\n        };\n        AutoMapper.prototype.createSourceProperty = function (metadata, parent) {\n            var level = !parent ? 0 : parent.level + 1;\n            var sourceNameParts = metadata.source.split('.');\n            if (level >= sourceNameParts.length) {\n                return null;\n            }\n            var source = {\n                name: sourceNameParts[level],\n                sourcePropertyName: metadata.source,\n                destinationPropertyName: metadata.destination,\n                parent: parent,\n                level: level,\n                children: [],\n                destination: null\n            };\n            if ((level + 1) < sourceNameParts.length) {\n                // recursively add child source properties ...\n                var child = this.createSourceProperty(metadata, source);\n                if (child) {\n                    source.children.push(child);\n                }\n                source.destination = null;\n            }\n            else {\n                // ... or (!) add destination\n                source.destination = this.createDestinationProperty(metadata, null);\n            }\n            return source;\n        };\n        AutoMapper.prototype.createDestinationProperty = function (metadata, parent) {\n            var level = !parent ? 0 : parent.level + 1;\n            var destinationNameParts = metadata.destination.split('.');\n            if (level >= destinationNameParts.length) {\n                return null;\n            }\n            var destination = {\n                name: destinationNameParts[level],\n                sourcePropertyName: metadata.source,\n                destinationPropertyName: metadata.destination,\n                parent: parent,\n                level: level,\n                child: null,\n                transformations: [],\n                conditionFunction: null,\n                ignore: false,\n                sourceMapping: false\n            };\n            if ((level + 1) < destinationNameParts.length) {\n                // recursively add child destination properties\n                destination.child = this.createDestinationProperty(metadata, destination);\n            }\n            else {\n                // add/merge properties\n                destination.sourceMapping = metadata.sourceMapping;\n                destination.conditionFunction = metadata.condition;\n                destination.ignore = metadata.ignore;\n                destination.transformations.push(metadata.transformation);\n            }\n            return destination;\n        };\n        AutoMapper.prototype.mergeSourceProperty = function (property, existingProperties, sourceMapping) {\n            // find source property\n            var existing = sourceMapping\n                ? this.findProperty(property.name, existingProperties)\n                : this.matchSourcePropertyByDestination(property, existingProperties);\n            if (!existing) {\n                return false;\n            }\n            if (property.destination) {\n                if (existing.children.length > 0) {\n                    var existingDestination = this.getDestinationProperty(existing.destinationPropertyName, existing);\n                    // existing is (further) nested => rebase and/or merge\n                    if (this.handleMapFromProperties(property, existing)) {\n                        // merge and rebase existing destination to current source level\n                        if (!this.mergeDestinationProperty(property.destination, existingDestination)) {\n                            return false;\n                        }\n                        existing.destination = existingDestination;\n                        existing.children = [];\n                        return true;\n                    }\n                    // merge property.destination with existing mapFrom() destination (don't care about nesting depth here)\n                    return this.mergeDestinationProperty(property.destination, existingDestination);\n                }\n                // both are at same level => simple merge.\n                if (!this.mergeDestinationProperty(property.destination, existing.destination)) {\n                    return false;\n                }\n                this.handleMapFromProperties(property, existing);\n                return true;\n            }\n            if (property.children.length > 0) {\n                // new source is (further) nested.\n                if (existing.children.length > 0) {\n                    // both have further nesting, delegate merging child(ren) by recursively calling this function.\n                    for (var _i = 0, _a = property.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        if (!this.mergeSourceProperty(child, existing.children, sourceMapping)) {\n                            return false;\n                        }\n                    }\n                    if (property.destinationPropertyName !== property.sourcePropertyName) {\n                        // this is a mapFrom() registration. It is handled using the nested source properties, \n                        // we only are responsible for syncing the name properties.\n                        existing.name = property.name;\n                        existing.sourcePropertyName = property.sourcePropertyName;\n                    }\n                    return true;\n                }\n                // existing is not (further) nested. this is always a mapFrom() situation. \n                if (property.sourcePropertyName !== existing.sourcePropertyName) {\n                    var newDestination = this.getDestinationProperty(existing.destinationPropertyName, property);\n                    if (property.destinationPropertyName !== property.sourcePropertyName) {\n                        // this is a mapFrom() registration. In that case:\n                        // 1) merge destinations, 2) add source child and 3) move destination to (youngest) child\n                        // NOTE special mergeDestinationProperty call => we use the new destination as 'target',\n                        //      because that will save us trouble overwriting ;)...\n                        if (!this.mergeDestinationProperty(existing.destination, newDestination, true)) {\n                            return false;\n                        }\n                        existing.children = property.children;\n                        existing.name = property.name;\n                        existing.sourcePropertyName = property.sourcePropertyName;\n                        existing.destination = null;\n                        // TODO Should never be necessary (test): existing.destinationPropertyName = property.destinationPropertyName;\n                        return true;\n                    }\n                    // ... nope, it is a destination which has previously been registered using mapFrom. just merge\n                    return this.mergeDestinationProperty(newDestination, existing.destination);\n                }\n            }\n            throw new Error('TODO TEST AND REMOVE => Source property should have destination or child(ren)');\n        };\n        /**\n         * handle property naming when the current property to merge is a mapFrom property\n         */\n        AutoMapper.prototype.handleMapFromProperties = function (property, existingProperty) {\n            if (property.destinationPropertyName === property.sourcePropertyName ||\n                property.sourcePropertyName === existingProperty.sourcePropertyName) {\n                return false;\n            }\n            // only overwrite name when a mapFrom situation applies\n            existingProperty.name = property.name;\n            existingProperty.sourcePropertyName = property.sourcePropertyName;\n            // TODO Should never be necessary (test) => existingProperty.destinationPropertyName = property.destinationPropertyName;\n            return true;\n        };\n        AutoMapper.prototype.getDestinationProperty = function (destinationPropertyName, existingSource) {\n            if (existingSource.destination) {\n                return existingSource.destination;\n            }\n            if (existingSource.children) {\n                for (var _i = 0, _a = existingSource.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    var destination = this.getDestinationProperty(destinationPropertyName, child);\n                    if (destination) {\n                        return destination;\n                    }\n                }\n            }\n            return null;\n        };\n        AutoMapper.prototype.mergeDestinationProperty = function (destination, existingDestination, swapTransformations) {\n            if (swapTransformations === void 0) { swapTransformations = false; }\n            if (destination.child) {\n                if (existingDestination.child) {\n                    // both have further nesting, delegate merging children by recursively calling this function.\n                    if (!this.mergeDestinationProperty(destination.child, existingDestination.child, swapTransformations)) {\n                        return false;\n                    }\n                    this.handleMapFromProperties(destination, existingDestination);\n                    return true;\n                }\n                // the current destination is not (further) nested. a destination property registration has one of both: \n                // a) children or b) transformations. returning false will cause creating a duplicate source property entry instead.\n                return false;\n            }\n            if (existingDestination.sourceMapping !== destination.sourceMapping &&\n                existingDestination.sourcePropertyName !== destination.sourcePropertyName) {\n                // unable to perform mapFrom() on a property which is being registered using forSourceMember.\n                return false; // TODO: Unpredictable? Idea: throw new Error('Unable to perform mapFrom() on a property which is being registered using forSourceMember.');\n            }\n            // merge destination properties\n            if (destination.sourceMapping) {\n                // only set source mapping when not yet set to true, once source mapped is source mapped forever.\n                // TODO Verify edge cases!\n                existingDestination.sourceMapping = destination.sourceMapping;\n            }\n            if (destination.ignore) {\n                // only set ignore when not yet set, once ignored is ignored forever. \n                existingDestination.ignore = destination.ignore;\n            }\n            if (destination.conditionFunction) {\n                // overwrite condition function by the latest one specified.\n                existingDestination.conditionFunction = destination.conditionFunction;\n            }\n            var transformations = [];\n            if (swapTransformations) {\n                for (var _i = 0, _a = destination.transformations; _i < _a.length; _i++) {\n                    var transformation = _a[_i];\n                    transformations.push(transformation);\n                }\n                for (var _b = 0, _c = existingDestination.transformations; _b < _c.length; _b++) {\n                    var transformation = _c[_b];\n                    transformations.push(transformation);\n                }\n            }\n            else {\n                for (var _d = 0, _e = existingDestination.transformations; _d < _e.length; _d++) {\n                    var transformation = _e[_d];\n                    transformations.push(transformation);\n                }\n                for (var _f = 0, _g = destination.transformations; _f < _g.length; _f++) {\n                    var transformation = _g[_f];\n                    transformations.push(transformation);\n                }\n            }\n            existingDestination.transformations = transformations;\n            this.handleMapFromProperties(destination, existingDestination);\n            return true;\n        };\n        AutoMapper.prototype.matchSourcePropertyByDestination = function (source, properties) {\n            if (!properties) {\n                return null;\n            }\n            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n                var property = properties_1[_i];\n                if (property.destinationPropertyName === source.destinationPropertyName) {\n                    return property;\n                }\n            }\n            return null;\n        };\n        AutoMapper.prototype.findProperty = function (name, properties) {\n            if (!properties) {\n                return null;\n            }\n            for (var _i = 0, properties_2 = properties; _i < properties_2.length; _i++) {\n                var property = properties_2[_i];\n                if (property.name === name) {\n                    return property;\n                }\n            }\n            return null;\n        };\n        AutoMapper._instance = new AutoMapper();\n        return AutoMapper;\n    }(AutoMapperJs.AutoMapperBase));\n    AutoMapperJs.AutoMapper = AutoMapper;\n})(AutoMapperJs || (AutoMapperJs = {}));\n// Add AutoMapper to the application's global scope. Of course, you could still use Core.AutoMapper.getInstance() as well.\nvar automapper = (function (app) {\n    app.automapper = AutoMapperJs.AutoMapper.getInstance();\n    return app.automapper;\n})(this);\n\n//# sourceMappingURL=AutoMapper.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\n/// <reference path=\"../../src/ts/AutoMapper.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * Converts source type to destination type instead of normal member mapping\n     */\n    var Profile = (function () {\n        function Profile() {\n        }\n        /**\n         * Implement this method in a derived class and call the CreateMap method to associate that map with this profile.\n         * Avoid calling the AutoMapper class / automapper instance from this method.\n         */\n        Profile.prototype.configure = function () {\n            // do nothing\n        };\n        /**\n         * Create a mapping profile.\n         * @param {string} sourceKey The map source key.\n         * @param {string} destinationKey The map destination key.\n         * @returns {Core.ICreateMapFluentFunctions}\n         */\n        Profile.prototype.createMap = function (sourceKey, destinationKey) {\n            var argsCopy = Array.prototype.slice.apply(arguments);\n            for (var index = 0, length = argsCopy.length; index < length; index++) {\n                if (!argsCopy[index]) {\n                    continue;\n                }\n                // prefix sourceKey and destinationKey with 'profileName=>'\n                argsCopy[index] = this.profileName + \"=>\" + argsCopy[index];\n            }\n            // pass through using arguments to keep createMap's currying support fully functional.\n            return automapper.createMap.apply(automapper, argsCopy);\n        };\n        return Profile;\n    }());\n    AutoMapperJs.Profile = Profile;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=Profile.js.map\n","/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    /**\n     * Converts source type to destination type instead of normal member mapping\n     */\n    var TypeConverter = (function () {\n        function TypeConverter() {\n        }\n        /**\n         * Performs conversion from source to destination type.\n         * @param {IResolutionContext} resolutionContext Resolution context.\n         * @returns {any} Destination object.\n         */\n        TypeConverter.prototype.convert = function (resolutionContext) {\n            // NOTE BL Unfortunately, TypeScript/JavaScript do not support abstract base classes.\n            //         This is just one way around, please convince me about a better solution.\n            throw new Error('The TypeConverter.convert method is abstract. Use a TypeConverter extension class instead.');\n        };\n        return TypeConverter;\n    }());\n    AutoMapperJs.TypeConverter = TypeConverter;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=TypeConverter.js.map\n","/// <reference path=\"../../../dist/automapper-interfaces.d.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    var CamelCaseNamingConvention = (function () {\n        function CamelCaseNamingConvention() {\n            this.splittingExpression = /(^[a-z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\n            this.separatorCharacter = '';\n        }\n        CamelCaseNamingConvention.prototype.transformPropertyName = function (sourcePropertyNameParts) {\n            // Transform the splitted parts.\n            var result = '';\n            for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\n                if (index === 0) {\n                    result += sourcePropertyNameParts[index].charAt(0).toLowerCase() +\n                        sourcePropertyNameParts[index].substr(1);\n                }\n                else {\n                    result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\n                        sourcePropertyNameParts[index].substr(1);\n                }\n            }\n            return result;\n        };\n        return CamelCaseNamingConvention;\n    }());\n    AutoMapperJs.CamelCaseNamingConvention = CamelCaseNamingConvention;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=CamelCaseNamingConvention.js.map\n","/// <reference path=\"../../../dist/automapper-interfaces.d.ts\" />\nvar AutoMapperJs;\n(function (AutoMapperJs) {\n    'use strict';\n    var PascalCaseNamingConvention = (function () {\n        function PascalCaseNamingConvention() {\n            this.splittingExpression = /(^[A-Z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\n            this.separatorCharacter = '';\n        }\n        PascalCaseNamingConvention.prototype.transformPropertyName = function (sourcePropertyNameParts) {\n            // Transform the splitted parts.\n            var result = '';\n            for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\n                result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\n                    sourcePropertyNameParts[index].substr(1);\n            }\n            return result;\n        };\n        return PascalCaseNamingConvention;\n    }());\n    AutoMapperJs.PascalCaseNamingConvention = PascalCaseNamingConvention;\n})(AutoMapperJs || (AutoMapperJs = {}));\n\n//# sourceMappingURL=PascalCaseNamingConvention.js.map\n"]}