{"version":3,"sources":["configuration.ts"],"names":["AutoMapperJs","AutoMapperJs.Samples","AutoMapperJs.Samples.Base","AutoMapperJs.Samples.Base.constructor","AutoMapperJs.Samples.Person","AutoMapperJs.Samples.Person.constructor","AutoMapperJs.Samples.MappingProfile","AutoMapperJs.Samples.MappingProfile.constructor","AutoMapperJs.Samples.MappingProfile.configure","AutoMapperJs.Samples.InitializeSamples","AutoMapperJs.Samples.InitializeSamples.constructor","AutoMapperJs.Samples.InitializeSamples.initialize","AutoMapperJs.Samples.ForMemberSamples","AutoMapperJs.Samples.ForMemberSamples.constructor","AutoMapperJs.Samples.ForMemberSamples.simpleMapFrom","AutoMapperJs.Samples.ForMemberSamples.stackedForMemberCalls"],"mappings":"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","file":"configuration.js","sourcesContent":["/// <reference path=\"../../dist/arcady-automapper-classes.d.ts\" />\r\n/// <reference path=\"../../dist/arcady-automapper-interfaces.d.ts\" />\r\n/// <reference path=\"../../dist/arcady-automapper-declaration.d.ts\" />\r\n\r\nmodule AutoMapperJs.Samples {\r\n    'use strict';\r\n\r\n    export class Base {\r\n        public apiJsonResult: any;\r\n    }\r\n\r\n    export class Person extends Base {\r\n\r\n    }\r\n\r\n    class MappingProfile implements IProfile {\r\n        public sourceMemberNamingConvention = new PascalCaseNamingConvention();\r\n        public destinationMemberNamingConvention = new CamelCaseNamingConvention();\r\n\r\n        public profileName = 'PascalCaseToCamelCase';\r\n\r\n        public configure(): void {\r\n            this.sourceMemberNamingConvention = new PascalCaseNamingConvention();\r\n            this.destinationMemberNamingConvention = new CamelCaseNamingConvention();\r\n        }\r\n    }\r\n\r\n    export class InitializeSamples {\r\n        public static initialize(): any {\r\n            automapper.initialize((cfg: IConfiguration) => {\r\n                cfg.addProfile(new MappingProfile());\r\n            });\r\n\r\n            const sourceKey = 'initialize';\r\n            const destinationKey = '{}';\r\n\r\n            const sourceObject = { FullName: 'John Doe' };\r\n\r\n            automapper\r\n                .createMap(sourceKey, destinationKey)\r\n                .withProfile('PascalCaseToCamelCase');\r\n\r\n            var result = automapper.map(sourceKey, destinationKey, sourceObject);\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    export class ForMemberSamples {\r\n        public static simpleMapFrom(): any {\r\n            const sourceKey = 'simpleMapFrom';\r\n            const destinationKey = '{}';\r\n\r\n            const sourceObject = { fullName: 'John Doe' };\r\n\r\n            automapper\r\n                .createMap(sourceKey, destinationKey)\r\n                .forMember('name', (opts: AutoMapperJs.IMemberConfigurationOptions) => opts.mapFrom('fullName'));\r\n\r\n            var result = automapper.map(sourceKey, destinationKey, sourceObject);\r\n\r\n            return result;\r\n        }\r\n\r\n        public static stackedForMemberCalls(): any {\r\n            const sourceKey = 'stackedForMemberCalls';\r\n            const destinationKey = 'Person';\r\n\r\n            const sourceObject = { birthdayString: '2000-01-01T00:00:00.000Z' };\r\n\r\n            automapper\r\n                .createMap(sourceKey, destinationKey)\r\n                .forMember('birthday', (opts: IMemberConfigurationOptions) => opts.mapFrom('birthdayString'))\r\n                .forMember('birthday', (opts: IMemberConfigurationOptions) => new Date(opts.sourceObject[opts.sourcePropertyName]));\r\n\r\n            var result = automapper.map(sourceKey, destinationKey, sourceObject);\r\n\r\n            return result;\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}