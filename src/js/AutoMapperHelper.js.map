{"version":3,"sources":["AutoMapperHelper.ts"],"names":["AutoMapperJs","AutoMapperJs.AutoMapperHelper","AutoMapperJs.AutoMapperHelper.constructor","AutoMapperJs.AutoMapperHelper.getClassName","AutoMapperJs.AutoMapperHelper.getFunctionParameters","AutoMapperJs.AutoMapperHelper.handleCurrying","AutoMapperJs.AutoMapperHelper.handleCurrying.accumulator"],"mappings":"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","file":"AutoMapperHelper.js","sourcesContent":["module AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * AutoMapper helper functions\r\n     */\r\n    export class AutoMapperHelper {\r\n        public static getClassName(classType: new() => any): string {\r\n            // source: http://stackoverflow.com/a/13914278/702357\r\n            if (classType && classType.constructor) {\r\n                let className = classType.toString();\r\n                if (className) {\r\n                    // classType.toString() is \"function classType (...) { ... }\"\r\n                    let matchParts = className.match(/function\\s*(\\w+)/);\r\n                    if (matchParts && matchParts.length === 2) {\r\n                        return matchParts[1];\r\n                    }\r\n                }\r\n\r\n                // for browsers which have name property in the constructor\r\n                // of the object, such as chrome\r\n                if ((<any>classType.constructor).name) {\r\n                    return (<any>classType.constructor).name;\r\n                }\r\n\r\n                if (classType.constructor.toString()) {\r\n                    var str = classType.constructor.toString();\r\n\r\n                    if (str.charAt(0) === '[') {\r\n                        // executed if the return of object.constructor.toString() is \"[object objectClass]\"\r\n                        var arr = str.match(/\\[\\w+\\s*(\\w+)\\]/);\r\n                    } else {\r\n                        // executed if the return of object.constructor.toString() is \"function objectClass () {}\"\r\n                        // (IE and Firefox)\r\n                        var arr = str.match(/function\\s*(\\w+)/);\r\n                    }\r\n\r\n                    if (arr && arr.length === 2) {\r\n                        return arr[1];\r\n                    }\r\n                }\r\n            }\r\n\r\n            throw new Error(`Unable to extract class name from type '${classType}'`);\r\n        }\r\n\r\n        // TODO BL Perhaps move to separate utility class?\r\n        public static getFunctionParameters(func: Function): Array<string> {\r\n            const stripComments = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n            const argumentNames = /([^\\s,]+)/g;\r\n\r\n            var functionString = func.toString().replace(stripComments, '');\r\n            var functionParameterNames = functionString.slice(functionString.indexOf('(') + 1, functionString.indexOf(')')).match(argumentNames);\r\n            if (functionParameterNames === null) {\r\n                functionParameterNames = new Array<string>();\r\n            }\r\n            return functionParameterNames;\r\n        }\r\n\r\n        // TODO BL Perhaps move to separate utility class?\r\n        // TODO BL Document (src: http://www.crockford.com/javascript/www_svendtofte_com/code/curried_javascript/index.html)\r\n        public static handleCurrying(func: Function, args: IArguments, closure: any): any {\r\n            const argumentsStillToCome = func.length - args.length;\r\n\r\n            // saved accumulator array\r\n            // NOTE BL this does not deep copy array objects, only the array itself; should side effects occur, please report (or refactor).\r\n            var argumentsCopy = Array.prototype.slice.apply(args);\r\n\r\n            function accumulator(moreArgs: IArguments, alreadyProvidedArgs: Array<any>, stillToCome: number): Function {\r\n                var previousAlreadyProvidedArgs = alreadyProvidedArgs.slice(0); // to reset\r\n                var previousStillToCome = stillToCome; // to reset\r\n\r\n                for (let i = 0; i < moreArgs.length; i++, stillToCome--) {\r\n                    alreadyProvidedArgs[alreadyProvidedArgs.length] = moreArgs[i];\r\n                }\r\n\r\n                if (stillToCome - moreArgs.length <= 0) {\r\n                    var functionCallResult = func.apply(closure, alreadyProvidedArgs);\r\n\r\n                    // reset vars, so curried function can be applied to new params.\r\n                    alreadyProvidedArgs = previousAlreadyProvidedArgs;\r\n                    stillToCome = previousStillToCome;\r\n\r\n                    return functionCallResult;\r\n                } else {\r\n                    return function(): Function {\r\n                        // arguments are params, so closure bussiness is avoided.\r\n                        return accumulator(arguments, alreadyProvidedArgs.slice(0), stillToCome);\r\n                    };\r\n                }\r\n            }\r\n\r\n            return accumulator(<IArguments>(<any>[]), argumentsCopy, argumentsStillToCome);\r\n        }\r\n\t}\r\n}"],"sourceRoot":"/source/"}