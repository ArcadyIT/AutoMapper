{"version":3,"sources":["AutoMapperValidator.ts"],"names":["AutoMapperJs","AutoMapperJs.AutoMapperValidator","AutoMapperJs.AutoMapperValidator.constructor","AutoMapperJs.AutoMapperValidator.assertConfigurationIsValid","AutoMapperJs.AutoMapperValidator.assertMappingConfiguration","AutoMapperJs.AutoMapperValidator.validatePropertyMapping","AutoMapperJs.AutoMapperValidator.validateSourcePropertyMapping","AutoMapperJs.AutoMapperValidator.validateDestinationPropertyMapping","AutoMapperJs.AutoMapperValidator.validateProperty"],"mappings":"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","file":"AutoMapperValidator.js","sourcesContent":["/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\r\n/// <reference path=\"AutoMapperHelper.ts\" />\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * AutoMapper configuration validator.\r\n     */\r\n    export class AutoMapperValidator {\r\n        /**\r\n         * Validates mapping configuration by dry-running. Since JS does not\r\n         * fully support typing, it only checks if properties match on both\r\n         * sides. The function needs IMapping.sourceTypeClass and \r\n         * IMapping.destinationTypeClass to function.\r\n         * @param {boolean} strictMode Whether or not to fail when properties\r\n         *                             sourceTypeClass or destinationTypeClass\r\n         *                             are unavailable. \r\n         */\r\n        public static assertConfigurationIsValid(mappings: any, strictMode: boolean = true): void {\r\n            for (var key in mappings) {\r\n                if (!mappings.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                AutoMapperValidator.assertMappingConfiguration(mappings[key], strictMode);\r\n            }\r\n        }\r\n\r\n        private static assertMappingConfiguration(mapping: IMapping, strictMode: boolean): void {\r\n            var mappingKey = `${mapping.sourceKey}=>${mapping.destinationKey}`;\r\n\r\n            var sourceType = mapping.sourceTypeClass;\r\n            var destinationType = mapping.destinationTypeClass;\r\n\r\n            var sourceClassName = sourceType ? AutoMapperHelper.getClassName(sourceType) : undefined;\r\n            var destinationClassName = destinationType ? AutoMapperHelper.getClassName(destinationType) : undefined;\r\n\r\n            if (!sourceType || !destinationType) {\r\n                if (strictMode === false) {\r\n                    return;\r\n                }\r\n\r\n                throw new Error(`Mapping '${mappingKey}' cannot be validated, since mapping.sourceType or mapping.destinationType are unspecified.`);\r\n            }\r\n\r\n            var tryHandle = (errorMessage: string) => {\r\n                if (errorMessage) {\r\n                    throw new Error(`Mapping '${mappingKey}' is invalid: ${errorMessage} (source: '${sourceClassName}', destination: '${destinationClassName}').`);\r\n                }\r\n            };\r\n\r\n            var validatedMembers = new Array<string>();\r\n\r\n            var srcObj = new sourceType();\r\n            var dstObj = new destinationType();\r\n\r\n            // walk member mappings\r\n            for (let property of mapping.properties) {\r\n\r\n\r\n                tryHandle(AutoMapperValidator.validatePropertyMapping(property, property.name, srcObj, dstObj));\r\n                validatedMembers.push(property.name);\r\n            }\r\n\r\n            // walk source members\r\n            for (let srcMember in srcObj) {\r\n                if (!srcObj.hasOwnProperty(srcMember)) {\r\n                    continue;\r\n                }\r\n\r\n                if (validatedMembers.indexOf(srcMember) >= 0) {\r\n                   // already validated\r\n                   continue;\r\n                }\r\n\r\n                tryHandle(AutoMapperValidator.validateProperty(srcMember, dstObj));\r\n                validatedMembers.push(srcMember);\r\n            }\r\n\r\n            // walk destination members\r\n            for (let dstMember in dstObj) {\r\n                if (!dstObj.hasOwnProperty(dstMember)) {\r\n                    continue;\r\n                }\r\n\r\n                if (validatedMembers.indexOf(dstMember) >= 0) {\r\n                   // already validated\r\n                   continue;\r\n                }\r\n\r\n                tryHandle(`Destination member '${dstMember}' does not exist on source type`);\r\n            }\r\n            // /* tslint:disable */\r\n            // console.error(key);\r\n            // /* tslint:enable */            \r\n        }\r\n\r\n        private static validatePropertyMapping(propertyMapping: IProperty, member: any, srcObj: any, dstObj: any): string {\r\n            return propertyMapping.sourceMapping\r\n                ? AutoMapperValidator.validateSourcePropertyMapping(propertyMapping, member, srcObj, dstObj)\r\n                : AutoMapperValidator.validateDestinationPropertyMapping(propertyMapping, member, srcObj, dstObj);\r\n\r\n        }\r\n\r\n        private static validateSourcePropertyMapping(propertyMapping: IProperty, member: any, srcObj: any, dstObj: any): string {\r\n            // a member for which configuration is provided, should exist.\r\n            if (!srcObj.hasOwnProperty(member)) {\r\n                return `Source member '${member}' is configured, but does not exist on source type`;\r\n            }\r\n\r\n            // an ignored source member should not exist on the destination type. \r\n            if (propertyMapping.ignore) {\r\n                if (dstObj.hasOwnProperty(member)) {\r\n                    return `Source member '${member}' is ignored, but does exist on destination type`;\r\n                }\r\n                return;\r\n            }\r\n\r\n            // a mapped source member should exist on the destination type.\r\n            if (!dstObj.hasOwnProperty(member)) {\r\n                return `Source member '${member}' is configured to be mapped, but does not exist on destination type`;\r\n            }\r\n\r\n            //var dstMember = propertyMapping.destinationProperty;\r\n\r\n            return undefined;\r\n        }\r\n\r\n        private static validateDestinationPropertyMapping(propertyMapping: IProperty, member: any, srcObj: any, dstObj: any): string {\r\n            // a member for which configuration is provided, should exist.\r\n            if (!dstObj.hasOwnProperty(member)) {\r\n                return `Destination member '${member}' is configured, but does not exist on destination type`;\r\n            }\r\n\r\n            // an ignored destination member should not exist on the source type. \r\n            if (propertyMapping.ignore) {\r\n                if (srcObj.hasOwnProperty(member)) {\r\n                    return `Destination member '${member}' is ignored, but does exist on source type`;\r\n                }\r\n                return;\r\n            }\r\n\r\n            // a mapped destination member should exist on the source type.\r\n            if (!srcObj.hasOwnProperty(member)) {\r\n                return `Destination member '${member}' is configured to be mapped, but does not exist on source type`;\r\n            }\r\n\r\n            //var dstMember = propertyMapping.destinationProperty;\r\n\r\n            return undefined;\r\n        }\r\n\r\n        private static validateProperty(srcMember: any, dstObj: any): string {\r\n            if (!dstObj.hasOwnProperty(srcMember)) {\r\n                return `Source member '${srcMember}' is configured to be mapped, but does not exist on destination type`;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}