{"version":3,"sources":["TypeConverter.ts"],"names":["AutoMapperJs","AutoMapperJs.TypeConverter","AutoMapperJs.TypeConverter.constructor","AutoMapperJs.TypeConverter.convert"],"mappings":"AAAA,qEAAqE;AAErE,IAAO,YAAY,CAkBlB;AAlBD,WAAO,YAAY,EAAC,CAAC;IACjBA,YAAYA,CAACA;IAEbA;;OAEGA;IACHA;QAAAC;QAWAC,CAACA;QAVGD;;;;WAIGA;QACIA,+BAAOA,GAAdA,UAAeA,iBAAqCA;YAChDE,qFAAqFA;YACrFA,mFAAmFA;YACnFA,MAAMA,IAAIA,KAAKA,CAACA,4FAA4FA,CAACA,CAACA;QAClHA,CAACA;QACLF,oBAACA;IAADA,CAXAD,AAWCC,IAAAD;IAXYA,0BAAaA,gBAWzBA,CAAAA;AACLA,CAACA,EAlBM,YAAY,KAAZ,YAAY,QAkBlB","file":"TypeConverter.js","sourcesContent":["/// <reference path=\"../../dist/arcady-automapper-interfaces.d.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    /**\r\n     * Converts source type to destination type instead of normal member mapping\r\n     */\r\n    export class TypeConverter implements ITypeConverter {\r\n        /**\r\n         * Performs conversion from source to destination type.\r\n         * @param {IResolutionContext} resolutionContext Resolution context.\r\n         * @returns {any} Destination object.\r\n         */\r\n        public convert(resolutionContext: IResolutionContext): any {\r\n            // NOTE BL Unfortunately, TypeScript/JavaScript do not support abstract base classes.\r\n            //         This is just one way around, please convince me about a better solution.\r\n            throw new Error('The TypeConverter.convert method is abstract. Use a TypeConverter extension class instead.');\r\n        }\r\n    }\r\n}"],"sourceRoot":"/source/"}