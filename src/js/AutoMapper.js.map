{"version":3,"sources":["AutoMapper.ts"],"names":["AutoMapperJs","AutoMapperJs.AutoMapper","AutoMapperJs.AutoMapper.constructor","AutoMapperJs.AutoMapper.getInstance","AutoMapperJs.AutoMapper.initialize","AutoMapperJs.AutoMapper.createMap","AutoMapperJs.AutoMapper.map","AutoMapperJs.AutoMapper.mapAsync","AutoMapperJs.AutoMapper.assertConfigurationIsValid","AutoMapperJs.AutoMapper.createMapForMember","AutoMapperJs.AutoMapper.getOrCreateMemberMapping","AutoMapperJs.AutoMapper.findMemberForDestinationProperty","AutoMapperJs.AutoMapper.createMapForMemberHandleMappingFunction","AutoMapperJs.AutoMapper.createMapForMemberHandleSyncMappingFunction","AutoMapperJs.AutoMapper.createMockDestinationMemberConfigOptions","AutoMapperJs.AutoMapper.createMapForSourceMember","AutoMapperJs.AutoMapper.createMapForSourceMemberHandleSyncMappingFunction","AutoMapperJs.AutoMapper.createMapForAllMembers","AutoMapperJs.AutoMapper.createMapIgnoreAllNonExisting","AutoMapperJs.AutoMapper.createMapConvertToType","AutoMapperJs.AutoMapper.createMapConvertUsing","AutoMapperJs.AutoMapper.configureSynchronousConverterFunction","AutoMapperJs.AutoMapper.createMapWithProfile","AutoMapperJs.AutoMapper.createMapWithProfileMergeMappings","AutoMapperJs.AutoMapper.mapInternal","AutoMapperJs.AutoMapper.mapArray","AutoMapperJs.AutoMapper.mapItem","AutoMapperJs.AutoMapper.mapItemUsingTypeConverter","AutoMapperJs.AutoMapper.mapProperty","AutoMapperJs.AutoMapper.handlePropertyMappings"],"mappings":"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","file":"AutoMapper.js","sourcesContent":["/// <reference path=\"../../dist/arcady-automapper-interfaces.d.ts\" />\r\n/// <reference path=\"AutoMapperBase.ts\" />\r\n/// <reference path=\"AsyncAutoMapper.ts\" />\r\n/// <reference path=\"TypeConverter.ts\" />\r\n/// <reference path=\"AutoMapperHelper.ts\" />\r\n/// <reference path=\"AutoMapperValidator.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n    type ICMChainFunc = IAutoMapperCreateMapChainingFunctions;\r\n\r\n    /**\r\n     * AutoMapper implementation, for both creating maps and performing maps. Comparable usage and functionality to the original\r\n     * .NET AutoMapper library is the pursuit of this implementation.\r\n     */\r\n    export class AutoMapper extends AutoMapperBase {\r\n        private static instance = new AutoMapper();\r\n\r\n        private profiles: { [name: string]: IProfile };\r\n        private mappings: { [key: string]: IMapping };\r\n\r\n        private asyncAutoMapper: AsyncAutoMapper;\r\n\r\n        /**\r\n         * Creates a new AutoMapper instance. This class is intended to be a Singleton.\r\n         * Do not use the constructor directly from code. Use getInstance() function instead.\r\n         * @constructor\r\n         */\r\n        constructor() {\r\n            super();\r\n\r\n            if (AutoMapper.instance) {\r\n                return AutoMapper.instance;\r\n            } else {\r\n                AutoMapper.instance = this;\r\n\r\n                this.profiles = {};\r\n                this.mappings = {};\r\n\r\n                this.asyncAutoMapper = new AsyncAutoMapper();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets AutoMapper Singleton instance.\r\n         * @returns {Core.AutoMapper}\r\n         */\r\n        public static getInstance(): AutoMapper {\r\n            return AutoMapper.instance;\r\n        }\r\n\r\n        /**\r\n         * Initializes the mapper with the supplied configuration.\r\n         * @param {(config: IConfiguration) => void} configFunction Configuration function to call.\r\n         */\r\n        public initialize(configFunction: (config: IConfiguration) => void): void {\r\n            var that = this;\r\n\r\n            // NOTE BL casting to any is needed, since TS does not fully support method overloading.\r\n            var configuration: IConfiguration = <any>{\r\n                addProfile: (profile: IProfile) : void => {\r\n                    profile.configure();\r\n                    that.profiles[profile.profileName] = profile;\r\n                },\r\n                createMap: function (sourceKey: string, destinationKey: string): ICMChainFunc {\r\n                    // pass through using arguments to keep createMap's currying support fully functional.\r\n                    return that.createMap.apply(that, arguments);\r\n                }\r\n            };\r\n            configFunction(configuration);\r\n        }\r\n\r\n        /**\r\n         * Create a mapping profile.\r\n         * @param {string} sourceKey The map source key.\r\n         * @param {string} destinationKey The map destination key.\r\n         * @returns {Core.IAutoMapperCreateMapChainingFunctions}\r\n         */\r\n        public createMap(sourceKeyOrType: string | (new() => any), destinationKeyOrType: string | (new() => any)): ICMChainFunc {\r\n            // provide currying support.\r\n            if (arguments.length < 2) {\r\n                return AutoMapperHelper.handleCurrying(this.createMap, arguments, this);\r\n            }\r\n\r\n            // create a mapping object for the given keys\r\n            var mapping: IMapping = {\r\n                sourceKey: super.getKey(sourceKeyOrType),\r\n                destinationKey: super.getKey(destinationKeyOrType),\r\n                forAllMemberMappings: new Array<(destinationObject: any, destinationPropertyName: string, value: any) => void>(),\r\n                forMemberMappings: {},\r\n                typeConverterFunction: undefined,\r\n                mapItemFunction: (m: IMapping, srcObj: any, dstObj: any): any => this.mapItem(m, srcObj, dstObj),\r\n                sourceTypeClass: (typeof sourceKeyOrType === 'string' ? undefined : sourceKeyOrType),\r\n                destinationTypeClass: (typeof destinationKeyOrType === 'string' ? undefined : destinationKeyOrType),\r\n                profile: undefined,\r\n                async: false\r\n            };\r\n            this.mappings[mapping.sourceKey + mapping.destinationKey] = mapping;\r\n\r\n            // return an object with available 'sub' functions to create a fluent interface / method chaining \r\n            // (e.g. automapper.createMap().forMember().forMember() ...)\r\n            var fluentApiFuncs: ICMChainFunc = {\r\n                forMember: (destinationProperty: string,\r\n                            valueOrFunction: any|((opts: IMemberConfigurationOptions) => any)|((opts: IMemberConfigurationOptions, cb: IMemberCallback) => void)\r\n                           ) : ICMChainFunc => this.createMapForMember(mapping, fluentApiFuncs, destinationProperty, valueOrFunction),\r\n                forSourceMember: (sourceProperty: string,\r\n                                  configFunction: ((opts: ISourceMemberConfigurationOptions) => any)|((opts: ISourceMemberConfigurationOptions, cb: IMemberCallback) => void)\r\n                                 ) : ICMChainFunc => this.createMapForSourceMember(mapping, fluentApiFuncs, sourceProperty, configFunction),\r\n                forAllMembers: (func: (destinationObject: any, destinationPropertyName: string, value: any) => void) : ICMChainFunc =>\r\n                    this.createMapForAllMembers(mapping, fluentApiFuncs, func),\r\n                ignoreAllNonExisting: () : ICMChainFunc =>\r\n                    this.createMapIgnoreAllNonExisting(mapping, fluentApiFuncs),\r\n                convertToType: (typeClass: new () => any) : ICMChainFunc =>\r\n                    this.createMapConvertToType(mapping, fluentApiFuncs, typeClass),\r\n                convertUsing: (typeConverterClassOrFunction: ((resolutionContext: IResolutionContext) => any) |\r\n                                                             ((resolutionContext: IResolutionContext, callback: IMapCallback) => void) |\r\n                                                             TypeConverter |\r\n                                                             (new() => TypeConverter)) : void =>\r\n                    this.createMapConvertUsing(mapping, typeConverterClassOrFunction),\r\n                withProfile: (profileName: string) : void => this.createMapWithProfile(mapping, profileName)\r\n            };\r\n            return fluentApiFuncs;\r\n        }\r\n\r\n        /**\r\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\r\n         * @param sourceKey Source key, for instance the source type name.\r\n         * @param destinationKey Destination key, for instance the destination type name.\r\n         * @param sourceObject The source object to map.\r\n         * @returns {any} Destination object.\r\n         */\r\n        public map(sourceKeyOrType: string | (new() => any), destinationKeyOrType: string | (new() => any), sourceObject: any): any {\r\n            if (arguments.length === 3) {\r\n                return this.mapInternal(super.getMapping(this.mappings, sourceKeyOrType, destinationKeyOrType), sourceObject);\r\n            }\r\n\r\n            // provide performance optimized (preloading) currying support.\r\n            if (arguments.length === 2) {\r\n                return (srcObj: any) => this.mapInternal(super.getMapping(this.mappings, sourceKeyOrType, destinationKeyOrType), srcObj);\r\n            }\r\n\r\n            if (arguments.length === 1) {\r\n                return (dstKey: string | (new() => any), srcObj: any) => this.map(sourceKeyOrType, dstKey, srcObj);\r\n            }\r\n\r\n            return (srcKey: string | (new() => any), dstKey: string | (new() => any), srcObj: any) => this.map(srcKey, dstKey, srcObj);\r\n        }\r\n\r\n        /**\r\n         * Execute an asynchronous mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\r\n         * @param sourceKey Source key, for instance the source type name.\r\n         * @param destinationKey Destination key, for instance the destination type name.\r\n         * @param sourceObject The source object to map.\r\n         * @param {IMapCallback} callback The callback to call when asynchronous mapping is complete.\r\n         */\r\n        public mapAsync(sourceKeyOrType: string | (new() => any), destinationKeyOrType: string | (new() => any), sourceObject: any, callback: IMapCallback): any {\r\n            return this.asyncAutoMapper.map(sourceKeyOrType, destinationKeyOrType, this.mappings, sourceObject, callback);\r\n        }\r\n\r\n        /**\r\n         * Validates mapping configuration by dry-running. Since JS does not\r\n         * fully support typing, it only checks if properties match on both\r\n         * sides. The function needs IMapping.sourceTypeClass and \r\n         * IMapping.destinationTypeClass to function.\r\n         * @param {boolean} strictMode Whether or not to fail when properties\r\n         *                             sourceTypeClass or destinationTypeClass\r\n         *                             are unavailable. \r\n         */\r\n        public assertConfigurationIsValid(strictMode: boolean = true): void {\r\n            AutoMapperValidator.assertConfigurationIsValid(this.mappings, strictMode);\r\n        }\r\n\r\n        /**\r\n         * Customize configuration for an individual destination member.\r\n         * @param {IMapping} mapping The mapping configuration for the current mapping keys/types.\r\n         * @param {IAutoMapperCreateMapChainingFunctions} toReturnFunctions The functions object to return to enable fluent layout behavior.\r\n         * @param {string} destinationProperty The destination member property name.\r\n         * @param valueOrFunction The value or function to use for this individual member.\r\n         * @returns {Core.IAutoMapperCreateMapChainingFunctions}\r\n         */\r\n        private createMapForMember(mapping: IMapping,\r\n                                   toReturnFunctions: ICMChainFunc,\r\n                                   destinationProperty: string,\r\n                                   valueOrFunction: any): ICMChainFunc {\r\n\r\n            var memberMapping = this.getOrCreateMemberMapping(mapping, destinationProperty, false);\r\n\r\n            // do not add additional mappings to a member that is already ignored.\r\n            if (memberMapping.ignore) {\r\n                return toReturnFunctions;\r\n            }\r\n\r\n            // store original source property name (cloned)\r\n            var originalSourcePropertyName = `${memberMapping.sourceProperty}`;\r\n\r\n            if (typeof valueOrFunction === 'function') {\r\n                this.createMapForMemberHandleMappingFunction(mapping, memberMapping, valueOrFunction);\r\n            } else {\r\n                memberMapping.mappingValuesAndFunctions.push(valueOrFunction);\r\n            }\r\n\r\n            // if this createMapForMember operation changes the source member (e.g. when mapFrom was specified), we delete\r\n            // the existing member mapping from the dictionary. After that, we add the merged member mapping to the dictionary\r\n            // with the new source member as key.\r\n            if (originalSourcePropertyName !== memberMapping.sourceProperty) {\r\n                delete mapping.forMemberMappings[originalSourcePropertyName];\r\n                mapping.forMemberMappings[memberMapping.sourceProperty] = memberMapping;\r\n            }\r\n\r\n            return toReturnFunctions;\r\n        }\r\n\r\n        private getOrCreateMemberMapping(mapping: IMapping, property: string, sourceMapping: boolean): IForMemberMapping {\r\n            // find existing mapping for member\r\n            var memberMapping: IForMemberMapping = sourceMapping\r\n                                    ? mapping.forMemberMappings[property]\r\n                                    : this.findMemberForDestinationProperty(mapping, property);\r\n\r\n            if (memberMapping === null || memberMapping === undefined) {\r\n                // set defaults for member mapping\r\n                memberMapping = {\r\n                    sourceProperty: property,\r\n                    destinationProperty: property,\r\n                    sourceMapping: sourceMapping,\r\n                    mappingValuesAndFunctions: new Array<any>(),\r\n                    ignore: false,\r\n                    async: false,\r\n                    conditionFunction: undefined\r\n                };\r\n\r\n                mapping.forMemberMappings[property] = memberMapping;\r\n            }\r\n\r\n            return memberMapping;\r\n        }\r\n        /**\r\n         * Try to locate an existing member mapping given a destination property name.\r\n         * @param {IMapping} mapping The mapping configuration for the current mapping keys/types.\r\n         * @param {string} destinationProperty The destination member property name.\r\n         * @returns {IForMemberMapping} Existing member mapping if found; otherwise, null.\r\n         */\r\n        private findMemberForDestinationProperty(mapping: IMapping, destinationPropertyName: string): IForMemberMapping {\r\n            for (let property in mapping.forMemberMappings) {\r\n                if (!mapping.forMemberMappings.hasOwnProperty(property)) {\r\n                    continue;\r\n                }\r\n\r\n                let memberMapping = mapping.forMemberMappings[property];\r\n\r\n                if (memberMapping.destinationProperty === destinationPropertyName) {\r\n                    return memberMapping;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        private createMapForMemberHandleMappingFunction(mapping: IMapping,\r\n                                                        memberMapping: IForMemberMapping,\r\n                                                        memberConfigFunc: ((opts: IMemberConfigurationOptions) => any) |\r\n                                                                          ((opts: IMemberConfigurationOptions, cb: IMemberCallback) => void)\r\n                                                       ): void {\r\n            var memberConfigFuncParameters = AutoMapperHelper.getFunctionParameters(memberConfigFunc);\r\n            if (memberConfigFuncParameters.length <= 1) {\r\n                this.createMapForMemberHandleSyncMappingFunction(memberMapping, <(opts: IMemberConfigurationOptions) => any>memberConfigFunc);\r\n            } else {\r\n                this.asyncAutoMapper.createMapForMemberFunction(mapping, memberMapping, <(opts: IMemberConfigurationOptions, cb: IMemberCallback) => void>memberConfigFunc);\r\n            }\r\n        }\r\n\r\n        private createMapForMemberHandleSyncMappingFunction(memberMapping: IForMemberMapping, memberConfigFunc: (opts: IMemberConfigurationOptions) => any): void {\r\n            var configFuncOptions = this.createMockDestinationMemberConfigOptions(memberMapping);\r\n\r\n            // actually call the (mocked) member config function.\r\n            try {\r\n                memberConfigFunc(configFuncOptions);\r\n            } catch (err) {\r\n                // not foreseeable, but no problem at all (possible by design, like with the opts.condition() and mappingValuesAndFunctions \r\n                // methods). We have to catch all potential errors from calling the function, since we cannot predict which goals the end \r\n                // user tries do reach with the stubbed sourceObject property.\r\n            }\r\n\r\n            if (!memberMapping.ignore) {\r\n                memberMapping.mappingValuesAndFunctions.push(memberConfigFunc);\r\n            }\r\n        }\r\n\r\n        private createMockDestinationMemberConfigOptions(memberMapping: IForMemberMapping): IMemberConfigurationOptions {\r\n            // Since we are calling the valueOrFunction function to determine whether to ignore or map from another property, we\r\n            // want to prevent the call to be error prone when the end user uses the '(opts)=> opts.sourceObject.sourcePropertyName'\r\n            // syntax. We don't actually have a source object when creating a mapping; therefore, we 'stub' a source object for the\r\n            // function call.\r\n            var sourceObject: any = {};\r\n            sourceObject[memberMapping.sourceProperty] = {};\r\n\r\n            // calling the function will result in calling our stubbed ignore() and mapFrom() functions if used inside the function.\r\n            const configFuncOptions: IMemberConfigurationOptions = {\r\n                ignore: (): void => {\r\n                    // an ignored member effectively has no mapping values / functions. Remove potentially existing values / functions.\r\n                    memberMapping.ignore = true;\r\n                    memberMapping.sourceProperty = memberMapping.destinationProperty; // in case someone really tried mapFrom before.\r\n                    memberMapping.mappingValuesAndFunctions = new Array<any>();\r\n                },\r\n                condition: (predicate: ((sourceObject: any) => boolean)): void => {\r\n                    memberMapping.conditionFunction = predicate;\r\n                },\r\n                mapFrom: (sourcePropertyName: string): void => {\r\n                    memberMapping.sourceProperty = sourcePropertyName;\r\n                },\r\n                sourceObject: sourceObject,\r\n                sourcePropertyName: memberMapping.sourceProperty,\r\n                intermediatePropertyValue: {}\r\n            };\r\n\r\n            return configFuncOptions;\r\n        }\r\n\r\n        /**\r\n         * Customize configuration for an individual source member.\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param toReturnFunctions The functions object to return to enable fluent layout behavior.\r\n         * @param sourceProperty The source member property name.\r\n         * @param memberConfigFunc The function to use for this individual member.\r\n         * @returns {Core.IAutoMapperCreateMapChainingFunctions}\r\n         */\r\n        private createMapForSourceMember(mapping: IMapping,\r\n                                         toReturnFunctions: ICMChainFunc,\r\n                                         sourceProperty: string,\r\n                                         memberConfigFunc: ((opts: ISourceMemberConfigurationOptions) => any) |\r\n                                                           ((opts: ISourceMemberConfigurationOptions, cb: IMemberCallback) => void)\r\n                                        ): ICMChainFunc {\r\n            if (typeof memberConfigFunc !== 'function') {\r\n                throw new Error('Configuration of forSourceMember has to be a function with one (sync) or two (async) options parameters.');\r\n            }\r\n\r\n            var memberMapping = this.getOrCreateMemberMapping(mapping, sourceProperty, true);\r\n\r\n            // do not add additional mappings to a member that is already ignored.\r\n            if (memberMapping.ignore) {\r\n                return toReturnFunctions;\r\n            }\r\n\r\n            if (AutoMapperHelper.getFunctionParameters(memberConfigFunc).length <= 1) {\r\n                this.createMapForSourceMemberHandleSyncMappingFunction(memberMapping, <(opts: ISourceMemberConfigurationOptions) => any>memberConfigFunc);\r\n            } else {\r\n               this.asyncAutoMapper.createMapForSourceMemberFunction(mapping, memberMapping, memberConfigFunc);\r\n            }\r\n\r\n            return toReturnFunctions;\r\n        }\r\n\r\n        private createMapForSourceMemberHandleSyncMappingFunction(memberMapping: IForMemberMapping, memberConfigFunc: (opts: ISourceMemberConfigurationOptions) => any): void {\r\n            var configFuncOptions = {\r\n                ignore: (): void => {\r\n                    memberMapping.ignore = true;\r\n                    memberMapping.async = false;\r\n                    memberMapping.mappingValuesAndFunctions = new Array<any>();\r\n                    memberMapping.destinationProperty = undefined;\r\n                }\r\n            };\r\n\r\n            memberConfigFunc(configFuncOptions);\r\n\r\n            if (!memberMapping.ignore) {\r\n                memberMapping.mappingValuesAndFunctions.push(memberConfigFunc);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Customize configuration for all destination members.\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param toReturnFunctions The functions object to return to enable fluent layout behavior.\r\n         * @param func The function to use for this individual member.\r\n         * @returns {Core.IAutoMapperCreateMapChainingFunctions}\r\n         */\r\n        private createMapForAllMembers(mapping: IMapping,\r\n                                       toReturnFunctions: ICMChainFunc,\r\n                                       func: (destinationObject: any, destinationPropertyName: string, value: any) => void\r\n                                      ): ICMChainFunc {\r\n            mapping.forAllMemberMappings.push(func);\r\n            return toReturnFunctions;\r\n        }\r\n\r\n        /**\r\n         * Ignore all members not specified explicitly.\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param toReturnFunctions The functions object to return to enable fluent layout behavior.\r\n         * @returns {Core.IAutoMapperCreateMapChainingFunctions}\r\n         */\r\n        private createMapIgnoreAllNonExisting(mapping: IMapping, toReturnFunctions: ICMChainFunc): ICMChainFunc {\r\n            mapping.ignoreAllNonExisting = true;\r\n            return toReturnFunctions;\r\n        }\r\n\r\n        /**\r\n         * Specify to which class type AutoMapper should convert. When specified, AutoMapper will create an instance of the given type, instead of returning a new object literal.\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param toReturnFunctions The functions object to return to enable fluent layout behavior.\r\n         * @param typeClass The destination type class.\r\n         * @returns {Core.IAutoMapperCreateMapChainingFunctions}\r\n         */\r\n        private createMapConvertToType(mapping: IMapping,\r\n                                       toReturnFunctions: ICMChainFunc,\r\n                                       typeClass: new () => any): ICMChainFunc {\r\n            if (mapping.destinationTypeClass) {\r\n                if (mapping.destinationTypeClass === typeClass) {\r\n                    return toReturnFunctions;\r\n                }\r\n\r\n                throw new Error('Destination type class can only be set once.');\r\n            }\r\n\r\n            mapping.destinationTypeClass = typeClass;\r\n            return toReturnFunctions;\r\n        }\r\n\r\n        /**\r\n         * Skip normal member mapping and convert using a custom type converter (instantiated during mapping).\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param typeConverterClassOrFunction The converter class or function to use when converting.\r\n         */\r\n        private createMapConvertUsing(mapping: IMapping,\r\n                                      typeConverterClassOrFunction: ((resolutionContext: IResolutionContext) => any) |\r\n                                                                    ((resolutionContext: IResolutionContext, callback: IMapCallback) => void) |\r\n                                                                    TypeConverter |\r\n                                                                    (new() => TypeConverter)): void {\r\n            try {\r\n                // check if sync: TypeConverter instance\r\n                if (typeConverterClassOrFunction instanceof TypeConverter) {\r\n                    this.configureSynchronousConverterFunction(mapping, typeConverterClassOrFunction.convert);\r\n                    return;\r\n                }\r\n\r\n                // check if sync: TypeConverter class definition\r\n                var typeConverter: TypeConverter;\r\n                try {\r\n                    typeConverter = (<TypeConverter>new (<new() => TypeConverter>typeConverterClassOrFunction)());\r\n                } catch (e) {\r\n                    // Obviously, typeConverterClassOrFunction is not a TypeConverter class definition\r\n                }\r\n                if (typeConverter instanceof TypeConverter) {\r\n                    this.configureSynchronousConverterFunction(mapping, typeConverter.convert);\r\n                    return;\r\n                }\r\n\r\n                var functionParameters = AutoMapperHelper.getFunctionParameters(<any>typeConverterClassOrFunction);\r\n\r\n                // check if sync: function with resolutionContext parameter\r\n                if (functionParameters.length === 1) {\r\n                    this.configureSynchronousConverterFunction(mapping, <(resolutionContext: IResolutionContext) => any>typeConverterClassOrFunction);\r\n                    return;\r\n                }\r\n\r\n                // check if async: function with resolutionContext and callback parameters\r\n                if (functionParameters.length === 2) {\r\n                    this.asyncAutoMapper.createMapConvertUsing(mapping, <(ctx: IResolutionContext, cb: IMapCallback) => void>typeConverterClassOrFunction);\r\n                    return;\r\n                }\r\n\r\n                // okay, just try feeding the function to the configure function anyway...\r\n                this.configureSynchronousConverterFunction(mapping, <any>typeConverterClassOrFunction);\r\n            } catch (e) {\r\n                throw new Error(`The value provided for typeConverterClassOrFunction is invalid. ${e}`);\r\n            }\r\n\r\n            throw new Error(`The value provided for typeConverterClassOrFunction is invalid.`);\r\n        }\r\n\r\n        private configureSynchronousConverterFunction(mapping: IMapping, converterFunc: Function): void {\r\n            if (!converterFunc || AutoMapperHelper.getFunctionParameters(converterFunc).length !== 1) {\r\n                throw new Error('The function provided does not provide exactly one (resolutionContext) parameter.');\r\n            }\r\n\r\n            mapping.typeConverterFunction = <(resolutionContext: IResolutionContext) => any>converterFunc;\r\n            mapping.mapItemFunction = (m: IMapping, srcObj: any, dstObj: any): any => this.mapItemUsingTypeConverter(m, srcObj, dstObj);\r\n        }\r\n\r\n        /**\r\n         * Assign a profile to the current type map. \r\n         * @param {IMapping} mapping The mapping configuration for the current mapping keys/types.\r\n         * @param {string} profileName The profile name of the profile to assign.\r\n         */\r\n        private createMapWithProfile(mapping: IMapping, profileName: string): void {\r\n            // check if given profile exists\r\n            var profile = this.profiles[profileName];\r\n            if (typeof profile === 'undefined' || profile.profileName !== profileName) {\r\n                throw new Error(`Could not find profile with profile name '${profileName}'.`);\r\n            }\r\n\r\n            mapping.profile = profile;\r\n            // merge mappings\r\n            this.createMapWithProfileMergeMappings(mapping, profileName);\r\n        }\r\n\r\n        /**\r\n         * Merge original mapping object with the assigned profile's mapping object.\r\n         * @param {IMapping} mapping The mapping configuration for the current mapping keys/types.\r\n         * @param {string} profileName The profile name of the profile to assign.\r\n         */\r\n        private createMapWithProfileMergeMappings(mapping: IMapping,\r\n                                     profileName: string): void {\r\n\r\n            var profileMappingKey = `${profileName}=>${mapping.sourceKey}${profileName}=>${mapping.destinationKey}`;\r\n            var profileMapping: IMapping = this.mappings[profileMappingKey];\r\n            if (!profileMapping) {\r\n                return;\r\n            }\r\n\r\n            // append forAllMemberMappings calls to the original array.\r\n            if (profileMapping.forAllMemberMappings.length > 0) {\r\n                mapping.forAllMemberMappings.push(...profileMapping.forAllMemberMappings);\r\n            }\r\n\r\n            // overwrite original type converter function\r\n            if (profileMapping.typeConverterFunction) {\r\n                mapping.typeConverterFunction = profileMapping.typeConverterFunction;\r\n            }\r\n\r\n            // overwrite original type converter function\r\n            if (profileMapping.destinationTypeClass) {\r\n                mapping.destinationTypeClass = profileMapping.destinationTypeClass;\r\n            }\r\n\r\n            // walk through all the profile's property mappings\r\n            for (let propertyName in profileMapping.forMemberMappings) {\r\n                if (!profileMapping.forMemberMappings.hasOwnProperty(propertyName)) {\r\n                    continue;\r\n                }\r\n\r\n                let profilePropertyMapping = profileMapping.forMemberMappings[propertyName];\r\n\r\n                // try to find an existing mapping for this property mapping\r\n                let existingPropertyMapping = this.findMemberForDestinationProperty(mapping, profilePropertyMapping.destinationProperty);\r\n                if (existingPropertyMapping) {\r\n                    // in which case, we overwrite that one with the profile's property mapping.\r\n                    // okay, maybe a bit rude, but real merging is pretty complex and you should\r\n                    // probably not want to combine normal and profile createMap.forMember calls.\r\n                    delete mapping.forMemberMappings[existingPropertyMapping.sourceProperty];\r\n                    mapping.forMemberMappings[profilePropertyMapping.sourceProperty] = profilePropertyMapping;\r\n                }\r\n            }\r\n        }\r\n\r\n        private mapInternal(mapping: IMapping, sourceObject: any): any {\r\n            // TODO handle synchronize async mapping (?)\r\n            if (mapping.async) {\r\n                throw new Error('Impossible to use asynchronous mapping using automapper.map(); use automapper.mapAsync() instead.');\r\n//                 var result: any;\r\n//                 var handled = false;\r\n// \r\n//                 this.asyncAutoMapper.mapWithMapping(mapping, sourceObject, (res: any) => {\r\n//                     result = res;\r\n//                     handled = true;\r\n//                 });\r\n// \r\n//                 var synchronize = (timeoutMs: number = 0): void => {\r\n//                     if (!handled) {\r\n//                         window.setInterval((): void => {\r\n//                             synchronize(timeoutMs + 50);\r\n//                         }, timeoutMs);\r\n//                     }\r\n//                 };\r\n// \r\n//                 synchronize();\r\n//                 return result;\r\n            }\r\n\r\n            if (super.isArray(sourceObject)) {\r\n                return this.mapArray(mapping, sourceObject);\r\n            }\r\n\r\n            return (<IMapItemFunction>mapping.mapItemFunction)(mapping, sourceObject, super.createDestinationObject(mapping.destinationTypeClass));\r\n        }\r\n\r\n        /**\r\n         * Execute a mapping from the source array to a new destination array with explicit mapping configuration and supplied mapping options (using createMap).\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param sourceArray The source array to map.\r\n         * @returns {Array<any>} Destination array.\r\n         */\r\n        private mapArray(mapping: IMapping, sourceArray: Array<any>): Array<any> {\r\n            var destinationArray = super.handleArray(mapping, sourceArray, (sourceObject: any, destinationObject: any) => {\r\n                (<IMapItemFunction>mapping.mapItemFunction)(mapping, sourceObject, destinationObject);\r\n            });\r\n            return destinationArray;\r\n        }\r\n\r\n        /**\r\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param sourceObject The source object to map.\r\n         * @param destinationObject The destination object to map to.\r\n         * @param arrayIndex The array index number, if this is an array being mapped.\r\n         */\r\n        private mapItem(mapping: IMapping, sourceObject: any, destinationObject: any): void {\r\n            super.handleItem(mapping, sourceObject, destinationObject, (propertyName: string) => {\r\n                this.mapProperty(mapping, sourceObject, destinationObject, propertyName);\r\n            });\r\n            return destinationObject;\r\n        }\r\n\r\n        /**\r\n         * Execute a mapping from the source object to a new destination object with explicit mapping configuration and supplied mapping options (using createMap).\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param sourceObject The source object to map.\r\n         * @param arrayIndex The array index number, if this is an array being mapped.\r\n         * @returns {any} Destination object.\r\n         */\r\n        private mapItemUsingTypeConverter(mapping: IMapping, sourceObject: any, destinationObject: any, arrayIndex?: number): void {\r\n            var resolutionContext: IResolutionContext = {\r\n                sourceValue: sourceObject,\r\n                destinationValue: destinationObject\r\n            };\r\n            return (<(ctx: IResolutionContext) => any>mapping.typeConverterFunction)(resolutionContext);\r\n        }\r\n\r\n        /**\r\n         * Execute a mapping from the source object property to the destination object property with explicit mapping configuration and supplied mapping options.\r\n         * @param mapping The mapping configuration for the current mapping keys/types.\r\n         * @param sourceObject The source object to map.\r\n         * @param sourceProperty The source property to map.\r\n         * @param destinationObject The destination object to map to.\r\n         */\r\n        private mapProperty(mapping: IMapping, sourceObject: any, destinationObject: any, sourceProperty: string): void {\r\n            super.handleProperty(mapping, sourceObject, sourceProperty, destinationObject,\r\n                (destinationProperty: string, valuesAndFunctions: Array<any>, opts: IMemberConfigurationOptions) => {\r\n                    var destinationPropertyValue = this.handlePropertyMappings(valuesAndFunctions, opts);\r\n                    super.setPropertyValue(mapping, destinationObject, destinationProperty, destinationPropertyValue);\r\n                });\r\n        }\r\n\r\n        private handlePropertyMappings(valuesAndFunctions: Array<any>, opts: IMemberConfigurationOptions): any {\r\n            if (!valuesAndFunctions || valuesAndFunctions.length === 0) {\r\n                return opts.intermediatePropertyValue;\r\n            }\r\n\r\n            var valueOrFunction = valuesAndFunctions[0];\r\n            if (typeof valueOrFunction === 'function') {\r\n                var result = valueOrFunction(opts);\r\n\r\n                if (typeof result !== 'undefined') {\r\n                    opts.intermediatePropertyValue = result;\r\n                }\r\n\r\n                // recursively walk values/functions\r\n                return this.handlePropertyMappings(valuesAndFunctions.slice(1), opts);\r\n            } else {\r\n                // valueOrFunction is a value\r\n                opts.intermediatePropertyValue = valueOrFunction;\r\n\r\n                // recursively walk values/functions\r\n                return this.handlePropertyMappings(valuesAndFunctions.slice(1), opts);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Add AutoMapper to the application's global scope. Of course, you could still use Core.AutoMapper.getInstance() as well.\r\nvar automapper: AutoMapperJs.AutoMapper = ((app: any) => {\r\n    app.automapper = AutoMapperJs.AutoMapper.getInstance();\r\n    return app.automapper;\r\n})(this);"],"sourceRoot":"/source/"}