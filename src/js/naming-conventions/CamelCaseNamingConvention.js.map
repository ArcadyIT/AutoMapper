{"version":3,"sources":["naming-conventions/CamelCaseNamingConvention.ts"],"names":["AutoMapperJs","AutoMapperJs.CamelCaseNamingConvention","AutoMapperJs.CamelCaseNamingConvention.constructor","AutoMapperJs.CamelCaseNamingConvention.transformPropertyName"],"mappings":"AAAA,iEAAiE;AAEjE,IAAO,YAAY,CAwBlB;AAxBD,WAAO,YAAY,EAAC,CAAC;IACjBA,YAAYA,CAACA;IAEhBA;QAAAC;YACcC,wBAAmBA,GAAGA,kDAAkDA,CAACA;YACzEA,uBAAkBA,GAAGA,EAAEA,CAACA;QAkBtCA,CAACA;QAhBOD,yDAAqBA,GAA5BA,UAA6BA,uBAAiCA;YACpDE,gCAAgCA;YAChCA,IAAIA,MAAMA,GAAWA,EAAEA,CAACA;YAExBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,MAAMA,GAAGA,uBAAuBA,CAACA,MAAMA,EAAEA,KAAKA,GAAGA,MAAMA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;gBAC9FA,EAAEA,CAACA,CAACA,KAAKA,KAAKA,CAACA,CAACA,CAACA,CAACA;oBACHA,MAAMA,IAAIA,uBAAuBA,CAACA,KAAKA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA;wBACxDA,uBAAuBA,CAACA,KAAKA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACjEA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBACIA,MAAMA,IAAIA,uBAAuBA,CAACA,KAAKA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,WAAWA,EAAEA;wBACtDA,uBAAuBA,CAACA,KAAKA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACnDA,CAACA;YACLA,CAACA;YAEDA,MAAMA,CAACA,MAAMA,CAACA;QAClBA,CAACA;QACRF,gCAACA;IAADA,CApBAD,AAoBCC,IAAAD;IApBYA,sCAAyBA,4BAoBrCA,CAAAA;AACFA,CAACA,EAxBM,YAAY,KAAZ,YAAY,QAwBlB","file":"naming-conventions/CamelCaseNamingConvention.js","sourcesContent":["/// <reference path=\"../../../dist/automapper-interfaces.d.ts\" />\r\n\r\nmodule AutoMapperJs {\r\n    'use strict';\r\n\r\n\texport class CamelCaseNamingConvention implements INamingConvention {\r\n        public splittingExpression = /(^[a-z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\r\n        public separatorCharacter = '';\r\n\r\n\t\tpublic transformPropertyName(sourcePropertyNameParts: string[]): string {\r\n            // Transform the splitted parts.\r\n            var result: string = '';\r\n\r\n            for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\r\n \t\t\t\tif (index === 0) {\r\n                    result += sourcePropertyNameParts[index].charAt(0).toLowerCase() +\r\n                            sourcePropertyNameParts[index].substr(1);\r\n\t\t\t\t} else {\r\n                result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\r\n                          sourcePropertyNameParts[index].substr(1);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\t}\r\n}"],"sourceRoot":"/source/"}